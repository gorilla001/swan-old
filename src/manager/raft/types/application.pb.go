// Code generated by protoc-gen-gogo.
// source: application.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		application.proto
		raft.proto

	It has these top-level messages:
		Application
		Version
		Container
		Docker
		Parameter
		PortMapping
		Volume
		KillPolicy
		UpdatePolicy
		HealthCheck
		Command
		Slot
		RestartPolicy
		Task
		OfferAllocatorItem
		InternalRaftRequest
		StoreAction
		Framework
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Application struct {
	ID              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version         *Version `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	ProposedVersion *Version `protobuf:"bytes,4,opt,name=proposedVersion" json:"proposedVersion,omitempty"`
	ClusterId       string   `protobuf:"bytes,5,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Priority        int64    `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	State           string   `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt       int64    `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64    `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{0} }

type Version struct {
	ID                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PerviousVersionID string            `protobuf:"bytes,2,opt,name=perviousVersionID,proto3" json:"perviousVersionID,omitempty"`
	Command           string            `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Cpus              float64           `protobuf:"fixed64,4,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Mem               float64           `protobuf:"fixed64,5,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk              float64           `protobuf:"fixed64,6,opt,name=disk,proto3" json:"disk,omitempty"`
	Instances         int32             `protobuf:"varint,7,opt,name=instances,proto3" json:"instances,omitempty"`
	RunAs             string            `protobuf:"bytes,8,opt,name=runAs,proto3" json:"runAs,omitempty"`
	Container         *Container        `protobuf:"bytes,9,opt,name=container" json:"container,omitempty"`
	Labels            map[string]string `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HealthChecks      []*HealthCheck    `protobuf:"bytes,11,rep,name=healthChecks" json:"healthChecks,omitempty"`
	Env               map[string]string `protobuf:"bytes,12,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KillPolicy        *KillPolicy       `protobuf:"bytes,13,opt,name=killPolicy" json:"killPolicy,omitempty"`
	UpdatePolicy      *UpdatePolicy     `protobuf:"bytes,14,opt,name=updatePolicy" json:"updatePolicy,omitempty"`
	Constraints       []string          `protobuf:"bytes,15,rep,name=constraints" json:"constraints,omitempty"`
	Uris              []string          `protobuf:"bytes,16,rep,name=uris" json:"uris,omitempty"`
	Ip                []string          `protobuf:"bytes,17,rep,name=ip" json:"ip,omitempty"`
	Mode              string            `protobuf:"bytes,18,opt,name=mode,proto3" json:"mode,omitempty"`
	AppId             string            `protobuf:"bytes,19,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{1} }

type Container struct {
	Type    string    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Docker  *Docker   `protobuf:"bytes,2,opt,name=docker" json:"docker,omitempty"`
	Volumes []*Volume `protobuf:"bytes,3,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{2} }

type Docker struct {
	ForcePullImage bool           `protobuf:"varint,1,opt,name=forcePullImage,proto3" json:"forcePullImage,omitempty"`
	Image          string         `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Network        string         `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Parameters     []*Parameter   `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
	PortMappings   []*PortMapping `protobuf:"bytes,5,rep,name=portMappings" json:"portMappings,omitempty"`
	Privileged     bool           `protobuf:"varint,6,opt,name=privileged,proto3" json:"privileged,omitempty"`
}

func (m *Docker) Reset()                    { *m = Docker{} }
func (m *Docker) String() string            { return proto.CompactTextString(m) }
func (*Docker) ProtoMessage()               {}
func (*Docker) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{3} }

type Parameter struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{4} }

type PortMapping struct {
	ContainerPort int32  `protobuf:"varint,1,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortMapping) Reset()                    { *m = PortMapping{} }
func (m *PortMapping) String() string            { return proto.CompactTextString(m) }
func (*PortMapping) ProtoMessage()               {}
func (*PortMapping) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{5} }

type Volume struct {
	ContainerPath string `protobuf:"bytes,1,opt,name=containerPath,proto3" json:"containerPath,omitempty"`
	HostPath      string `protobuf:"bytes,2,opt,name=hostPath,proto3" json:"hostPath,omitempty"`
	Mode          string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{6} }

type KillPolicy struct {
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *KillPolicy) Reset()                    { *m = KillPolicy{} }
func (m *KillPolicy) String() string            { return proto.CompactTextString(m) }
func (*KillPolicy) ProtoMessage()               {}
func (*KillPolicy) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{7} }

type UpdatePolicy struct {
	UpdateDelay  int32  `protobuf:"varint,1,opt,name=updateDelay,proto3" json:"updateDelay,omitempty"`
	MaxRetries   int32  `protobuf:"varint,2,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	MaxFailovers int32  `protobuf:"varint,3,opt,name=maxFailovers,proto3" json:"maxFailovers,omitempty"`
	Action       string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *UpdatePolicy) Reset()                    { *m = UpdatePolicy{} }
func (m *UpdatePolicy) String() string            { return proto.CompactTextString(m) }
func (*UpdatePolicy) ProtoMessage()               {}
func (*UpdatePolicy) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{8} }

type HealthCheck struct {
	ID                  string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address             string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Protocol            string   `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port                int32    `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	PortIndex           int32    `protobuf:"varint,5,opt,name=portIndex,proto3" json:"portIndex,omitempty"`
	PortName            string   `protobuf:"bytes,6,opt,name=portName,proto3" json:"portName,omitempty"`
	Command             *Command `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	Path                string   `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	ConsecutiveFailures uint32   `protobuf:"varint,9,opt,name=consecutiveFailures,proto3" json:"consecutiveFailures,omitempty"`
	GracePeriodSeconds  float64  `protobuf:"fixed64,10,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
	IntervalSeconds     float64  `protobuf:"fixed64,11,opt,name=intervalSeconds,proto3" json:"intervalSeconds,omitempty"`
	TimeoutSeconds      float64  `protobuf:"fixed64,12,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{9} }

type Command struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{10} }

type Slot struct {
	Index                int32          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Id                   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AppId                string         `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	VersionId            string         `protobuf:"bytes,4,opt,name=versionId,proto3" json:"versionId,omitempty"`
	State                string         `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	MarkForDeletion      bool           `protobuf:"varint,6,opt,name=markForDeletion,proto3" json:"markForDeletion,omitempty"`
	MarkForRollingUpdate bool           `protobuf:"varint,7,opt,name=markForRollingUpdate,proto3" json:"markForRollingUpdate,omitempty"`
	Healthy              bool           `protobuf:"varint,8,opt,name=healthy,proto3" json:"healthy,omitempty"`
	CurrentTask          *Task          `protobuf:"bytes,9,opt,name=CurrentTask,json=currentTask" json:"CurrentTask,omitempty"`
	RestartPolicy        *RestartPolicy `protobuf:"bytes,10,opt,name=restartPolicy" json:"restartPolicy,omitempty"`
}

func (m *Slot) Reset()                    { *m = Slot{} }
func (m *Slot) String() string            { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()               {}
func (*Slot) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{11} }

type RestartPolicy struct {
}

func (m *RestartPolicy) Reset()                    { *m = RestartPolicy{} }
func (m *RestartPolicy) String() string            { return proto.CompactTextString(m) }
func (*RestartPolicy) ProtoMessage()               {}
func (*RestartPolicy) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{12} }

type Task struct {
	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskInfoId    string   `protobuf:"bytes,2,opt,name=taskInfoId,proto3" json:"taskInfoId,omitempty"`
	AppId         string   `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	VersionId     string   `protobuf:"bytes,4,opt,name=versionId,proto3" json:"versionId,omitempty"`
	SlotId        string   `protobuf:"bytes,5,opt,name=slotId,proto3" json:"slotId,omitempty"`
	State         string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Stdout        string   `protobuf:"bytes,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string   `protobuf:"bytes,8,opt,name=stderr,proto3" json:"stderr,omitempty"`
	HostPorts     []uint64 `protobuf:"varint,9,rep,name=hostPorts" json:"hostPorts,omitempty"`
	OfferId       string   `protobuf:"bytes,10,opt,name=offerId,proto3" json:"offerId,omitempty"`
	AgentId       string   `protobuf:"bytes,11,opt,name=agentId,proto3" json:"agentId,omitempty"`
	Ip            string   `protobuf:"bytes,12,opt,name=ip,proto3" json:"ip,omitempty"`
	AgentHostName string   `protobuf:"bytes,13,opt,name=agentHostName,proto3" json:"agentHostName,omitempty"`
	Reason        string   `protobuf:"bytes,14,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedAt     int64    `protobuf:"varint,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{13} }

type OfferAllocatorItem struct {
	SlotId  string `protobuf:"bytes,1,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	OfferId string `protobuf:"bytes,2,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
}

func (m *OfferAllocatorItem) Reset()                    { *m = OfferAllocatorItem{} }
func (m *OfferAllocatorItem) String() string            { return proto.CompactTextString(m) }
func (*OfferAllocatorItem) ProtoMessage()               {}
func (*OfferAllocatorItem) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{14} }

func init() {
	proto.RegisterType((*Application)(nil), "types.Application")
	proto.RegisterType((*Version)(nil), "types.Version")
	proto.RegisterType((*Container)(nil), "types.Container")
	proto.RegisterType((*Docker)(nil), "types.Docker")
	proto.RegisterType((*Parameter)(nil), "types.Parameter")
	proto.RegisterType((*PortMapping)(nil), "types.PortMapping")
	proto.RegisterType((*Volume)(nil), "types.Volume")
	proto.RegisterType((*KillPolicy)(nil), "types.KillPolicy")
	proto.RegisterType((*UpdatePolicy)(nil), "types.UpdatePolicy")
	proto.RegisterType((*HealthCheck)(nil), "types.HealthCheck")
	proto.RegisterType((*Command)(nil), "types.Command")
	proto.RegisterType((*Slot)(nil), "types.Slot")
	proto.RegisterType((*RestartPolicy)(nil), "types.RestartPolicy")
	proto.RegisterType((*Task)(nil), "types.Task")
	proto.RegisterType((*OfferAllocatorItem)(nil), "types.OfferAllocatorItem")
}
func (this *Application) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Application")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Application but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Application but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !this.Version.Equal(that1.Version) {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if !this.ProposedVersion.Equal(that1.ProposedVersion) {
		return fmt.Errorf("ProposedVersion this(%v) Not Equal that(%v)", this.ProposedVersion, that1.ProposedVersion)
	}
	if this.ClusterId != that1.ClusterId {
		return fmt.Errorf("ClusterId this(%v) Not Equal that(%v)", this.ClusterId, that1.ClusterId)
	}
	if this.Priority != that1.Priority {
		return fmt.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	if this.State != that1.State {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if this.CreatedAt != that1.CreatedAt {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.ProposedVersion.Equal(that1.ProposedVersion) {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	return true
}
func (this *Version) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Version")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Version but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Version but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.PerviousVersionID != that1.PerviousVersionID {
		return fmt.Errorf("PerviousVersionID this(%v) Not Equal that(%v)", this.PerviousVersionID, that1.PerviousVersionID)
	}
	if this.Command != that1.Command {
		return fmt.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if this.Cpus != that1.Cpus {
		return fmt.Errorf("Cpus this(%v) Not Equal that(%v)", this.Cpus, that1.Cpus)
	}
	if this.Mem != that1.Mem {
		return fmt.Errorf("Mem this(%v) Not Equal that(%v)", this.Mem, that1.Mem)
	}
	if this.Disk != that1.Disk {
		return fmt.Errorf("Disk this(%v) Not Equal that(%v)", this.Disk, that1.Disk)
	}
	if this.Instances != that1.Instances {
		return fmt.Errorf("Instances this(%v) Not Equal that(%v)", this.Instances, that1.Instances)
	}
	if this.RunAs != that1.RunAs {
		return fmt.Errorf("RunAs this(%v) Not Equal that(%v)", this.RunAs, that1.RunAs)
	}
	if !this.Container.Equal(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", this.Container, that1.Container)
	}
	if len(this.Labels) != len(that1.Labels) {
		return fmt.Errorf("Labels this(%v) Not Equal that(%v)", len(this.Labels), len(that1.Labels))
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return fmt.Errorf("Labels this[%v](%v) Not Equal that[%v](%v)", i, this.Labels[i], i, that1.Labels[i])
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return fmt.Errorf("HealthChecks this(%v) Not Equal that(%v)", len(this.HealthChecks), len(that1.HealthChecks))
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return fmt.Errorf("HealthChecks this[%v](%v) Not Equal that[%v](%v)", i, this.HealthChecks[i], i, that1.HealthChecks[i])
		}
	}
	if len(this.Env) != len(that1.Env) {
		return fmt.Errorf("Env this(%v) Not Equal that(%v)", len(this.Env), len(that1.Env))
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return fmt.Errorf("Env this[%v](%v) Not Equal that[%v](%v)", i, this.Env[i], i, that1.Env[i])
		}
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return fmt.Errorf("KillPolicy this(%v) Not Equal that(%v)", this.KillPolicy, that1.KillPolicy)
	}
	if !this.UpdatePolicy.Equal(that1.UpdatePolicy) {
		return fmt.Errorf("UpdatePolicy this(%v) Not Equal that(%v)", this.UpdatePolicy, that1.UpdatePolicy)
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return fmt.Errorf("Constraints this(%v) Not Equal that(%v)", len(this.Constraints), len(that1.Constraints))
	}
	for i := range this.Constraints {
		if this.Constraints[i] != that1.Constraints[i] {
			return fmt.Errorf("Constraints this[%v](%v) Not Equal that[%v](%v)", i, this.Constraints[i], i, that1.Constraints[i])
		}
	}
	if len(this.Uris) != len(that1.Uris) {
		return fmt.Errorf("Uris this(%v) Not Equal that(%v)", len(this.Uris), len(that1.Uris))
	}
	for i := range this.Uris {
		if this.Uris[i] != that1.Uris[i] {
			return fmt.Errorf("Uris this[%v](%v) Not Equal that[%v](%v)", i, this.Uris[i], i, that1.Uris[i])
		}
	}
	if len(this.Ip) != len(that1.Ip) {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", len(this.Ip), len(that1.Ip))
	}
	for i := range this.Ip {
		if this.Ip[i] != that1.Ip[i] {
			return fmt.Errorf("Ip this[%v](%v) Not Equal that[%v](%v)", i, this.Ip[i], i, that1.Ip[i])
		}
	}
	if this.Mode != that1.Mode {
		return fmt.Errorf("Mode this(%v) Not Equal that(%v)", this.Mode, that1.Mode)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	return nil
}
func (this *Version) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.PerviousVersionID != that1.PerviousVersionID {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Cpus != that1.Cpus {
		return false
	}
	if this.Mem != that1.Mem {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Instances != that1.Instances {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if !this.Container.Equal(that1.Container) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return false
	}
	if !this.UpdatePolicy.Equal(that1.UpdatePolicy) {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if this.Constraints[i] != that1.Constraints[i] {
			return false
		}
	}
	if len(this.Uris) != len(that1.Uris) {
		return false
	}
	for i := range this.Uris {
		if this.Uris[i] != that1.Uris[i] {
			return false
		}
	}
	if len(this.Ip) != len(that1.Ip) {
		return false
	}
	for i := range this.Ip {
		if this.Ip[i] != that1.Ip[i] {
			return false
		}
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	return true
}
func (this *Container) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Container")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Container but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Container but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if !this.Docker.Equal(that1.Docker) {
		return fmt.Errorf("Docker this(%v) Not Equal that(%v)", this.Docker, that1.Docker)
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return fmt.Errorf("Volumes this(%v) Not Equal that(%v)", len(this.Volumes), len(that1.Volumes))
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return fmt.Errorf("Volumes this[%v](%v) Not Equal that[%v](%v)", i, this.Volumes[i], i, that1.Volumes[i])
		}
	}
	return nil
}
func (this *Container) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Docker.Equal(that1.Docker) {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	return true
}
func (this *Docker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Docker)
	if !ok {
		that2, ok := that.(Docker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Docker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Docker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Docker but is not nil && this == nil")
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return fmt.Errorf("ForcePullImage this(%v) Not Equal that(%v)", this.ForcePullImage, that1.ForcePullImage)
	}
	if this.Image != that1.Image {
		return fmt.Errorf("Image this(%v) Not Equal that(%v)", this.Image, that1.Image)
	}
	if this.Network != that1.Network {
		return fmt.Errorf("Network this(%v) Not Equal that(%v)", this.Network, that1.Network)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return fmt.Errorf("PortMappings this(%v) Not Equal that(%v)", len(this.PortMappings), len(that1.PortMappings))
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return fmt.Errorf("PortMappings this[%v](%v) Not Equal that[%v](%v)", i, this.PortMappings[i], i, that1.PortMappings[i])
		}
	}
	if this.Privileged != that1.Privileged {
		return fmt.Errorf("Privileged this(%v) Not Equal that(%v)", this.Privileged, that1.Privileged)
	}
	return nil
}
func (this *Docker) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Docker)
	if !ok {
		that2, ok := that.(Docker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return false
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return false
		}
	}
	if this.Privileged != that1.Privileged {
		return false
	}
	return true
}
func (this *Parameter) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Parameter")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Parameter but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Parameter but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PortMapping) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PortMapping")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PortMapping but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PortMapping but is not nil && this == nil")
	}
	if this.ContainerPort != that1.ContainerPort {
		return fmt.Errorf("ContainerPort this(%v) Not Equal that(%v)", this.ContainerPort, that1.ContainerPort)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Protocol != that1.Protocol {
		return fmt.Errorf("Protocol this(%v) Not Equal that(%v)", this.Protocol, that1.Protocol)
	}
	return nil
}
func (this *PortMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPort != that1.ContainerPort {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *Volume) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Volume")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Volume but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Volume but is not nil && this == nil")
	}
	if this.ContainerPath != that1.ContainerPath {
		return fmt.Errorf("ContainerPath this(%v) Not Equal that(%v)", this.ContainerPath, that1.ContainerPath)
	}
	if this.HostPath != that1.HostPath {
		return fmt.Errorf("HostPath this(%v) Not Equal that(%v)", this.HostPath, that1.HostPath)
	}
	if this.Mode != that1.Mode {
		return fmt.Errorf("Mode this(%v) Not Equal that(%v)", this.Mode, that1.Mode)
	}
	return nil
}
func (this *Volume) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPath != that1.ContainerPath {
		return false
	}
	if this.HostPath != that1.HostPath {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *KillPolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KillPolicy)
	if !ok {
		that2, ok := that.(KillPolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KillPolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KillPolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KillPolicy but is not nil && this == nil")
	}
	if this.Duration != that1.Duration {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", this.Duration, that1.Duration)
	}
	return nil
}
func (this *KillPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KillPolicy)
	if !ok {
		that2, ok := that.(KillPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *UpdatePolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdatePolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdatePolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdatePolicy but is not nil && this == nil")
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return fmt.Errorf("UpdateDelay this(%v) Not Equal that(%v)", this.UpdateDelay, that1.UpdateDelay)
	}
	if this.MaxRetries != that1.MaxRetries {
		return fmt.Errorf("MaxRetries this(%v) Not Equal that(%v)", this.MaxRetries, that1.MaxRetries)
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return fmt.Errorf("MaxFailovers this(%v) Not Equal that(%v)", this.MaxFailovers, that1.MaxFailovers)
	}
	if this.Action != that1.Action {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", this.Action, that1.Action)
	}
	return nil
}
func (this *UpdatePolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return false
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *HealthCheck) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HealthCheck")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HealthCheck but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HealthCheck but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Address != that1.Address {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if this.Protocol != that1.Protocol {
		return fmt.Errorf("Protocol this(%v) Not Equal that(%v)", this.Protocol, that1.Protocol)
	}
	if this.Port != that1.Port {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	if this.PortIndex != that1.PortIndex {
		return fmt.Errorf("PortIndex this(%v) Not Equal that(%v)", this.PortIndex, that1.PortIndex)
	}
	if this.PortName != that1.PortName {
		return fmt.Errorf("PortName this(%v) Not Equal that(%v)", this.PortName, that1.PortName)
	}
	if !this.Command.Equal(that1.Command) {
		return fmt.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if this.Path != that1.Path {
		return fmt.Errorf("Path this(%v) Not Equal that(%v)", this.Path, that1.Path)
	}
	if this.ConsecutiveFailures != that1.ConsecutiveFailures {
		return fmt.Errorf("ConsecutiveFailures this(%v) Not Equal that(%v)", this.ConsecutiveFailures, that1.ConsecutiveFailures)
	}
	if this.GracePeriodSeconds != that1.GracePeriodSeconds {
		return fmt.Errorf("GracePeriodSeconds this(%v) Not Equal that(%v)", this.GracePeriodSeconds, that1.GracePeriodSeconds)
	}
	if this.IntervalSeconds != that1.IntervalSeconds {
		return fmt.Errorf("IntervalSeconds this(%v) Not Equal that(%v)", this.IntervalSeconds, that1.IntervalSeconds)
	}
	if this.TimeoutSeconds != that1.TimeoutSeconds {
		return fmt.Errorf("TimeoutSeconds this(%v) Not Equal that(%v)", this.TimeoutSeconds, that1.TimeoutSeconds)
	}
	return nil
}
func (this *HealthCheck) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.PortIndex != that1.PortIndex {
		return false
	}
	if this.PortName != that1.PortName {
		return false
	}
	if !this.Command.Equal(that1.Command) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.ConsecutiveFailures != that1.ConsecutiveFailures {
		return false
	}
	if this.GracePeriodSeconds != that1.GracePeriodSeconds {
		return false
	}
	if this.IntervalSeconds != that1.IntervalSeconds {
		return false
	}
	if this.TimeoutSeconds != that1.TimeoutSeconds {
		return false
	}
	return true
}
func (this *Command) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Command)
	if !ok {
		that2, ok := that.(Command)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Command")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Command but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Command but is not nil && this == nil")
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *Command) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Command)
	if !ok {
		that2, ok := that.(Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Slot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Slot)
	if !ok {
		that2, ok := that.(Slot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Slot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Slot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Slot but is not nil && this == nil")
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.VersionId != that1.VersionId {
		return fmt.Errorf("VersionId this(%v) Not Equal that(%v)", this.VersionId, that1.VersionId)
	}
	if this.State != that1.State {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if this.MarkForDeletion != that1.MarkForDeletion {
		return fmt.Errorf("MarkForDeletion this(%v) Not Equal that(%v)", this.MarkForDeletion, that1.MarkForDeletion)
	}
	if this.MarkForRollingUpdate != that1.MarkForRollingUpdate {
		return fmt.Errorf("MarkForRollingUpdate this(%v) Not Equal that(%v)", this.MarkForRollingUpdate, that1.MarkForRollingUpdate)
	}
	if this.Healthy != that1.Healthy {
		return fmt.Errorf("Healthy this(%v) Not Equal that(%v)", this.Healthy, that1.Healthy)
	}
	if !this.CurrentTask.Equal(that1.CurrentTask) {
		return fmt.Errorf("CurrentTask this(%v) Not Equal that(%v)", this.CurrentTask, that1.CurrentTask)
	}
	if !this.RestartPolicy.Equal(that1.RestartPolicy) {
		return fmt.Errorf("RestartPolicy this(%v) Not Equal that(%v)", this.RestartPolicy, that1.RestartPolicy)
	}
	return nil
}
func (this *Slot) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Slot)
	if !ok {
		that2, ok := that.(Slot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.VersionId != that1.VersionId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.MarkForDeletion != that1.MarkForDeletion {
		return false
	}
	if this.MarkForRollingUpdate != that1.MarkForRollingUpdate {
		return false
	}
	if this.Healthy != that1.Healthy {
		return false
	}
	if !this.CurrentTask.Equal(that1.CurrentTask) {
		return false
	}
	if !this.RestartPolicy.Equal(that1.RestartPolicy) {
		return false
	}
	return true
}
func (this *RestartPolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RestartPolicy)
	if !ok {
		that2, ok := that.(RestartPolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RestartPolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RestartPolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RestartPolicy but is not nil && this == nil")
	}
	return nil
}
func (this *RestartPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RestartPolicy)
	if !ok {
		that2, ok := that.(RestartPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Task")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Task but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Task but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.TaskInfoId != that1.TaskInfoId {
		return fmt.Errorf("TaskInfoId this(%v) Not Equal that(%v)", this.TaskInfoId, that1.TaskInfoId)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.VersionId != that1.VersionId {
		return fmt.Errorf("VersionId this(%v) Not Equal that(%v)", this.VersionId, that1.VersionId)
	}
	if this.SlotId != that1.SlotId {
		return fmt.Errorf("SlotId this(%v) Not Equal that(%v)", this.SlotId, that1.SlotId)
	}
	if this.State != that1.State {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if this.Stdout != that1.Stdout {
		return fmt.Errorf("Stdout this(%v) Not Equal that(%v)", this.Stdout, that1.Stdout)
	}
	if this.Stderr != that1.Stderr {
		return fmt.Errorf("Stderr this(%v) Not Equal that(%v)", this.Stderr, that1.Stderr)
	}
	if len(this.HostPorts) != len(that1.HostPorts) {
		return fmt.Errorf("HostPorts this(%v) Not Equal that(%v)", len(this.HostPorts), len(that1.HostPorts))
	}
	for i := range this.HostPorts {
		if this.HostPorts[i] != that1.HostPorts[i] {
			return fmt.Errorf("HostPorts this[%v](%v) Not Equal that[%v](%v)", i, this.HostPorts[i], i, that1.HostPorts[i])
		}
	}
	if this.OfferId != that1.OfferId {
		return fmt.Errorf("OfferId this(%v) Not Equal that(%v)", this.OfferId, that1.OfferId)
	}
	if this.AgentId != that1.AgentId {
		return fmt.Errorf("AgentId this(%v) Not Equal that(%v)", this.AgentId, that1.AgentId)
	}
	if this.Ip != that1.Ip {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", this.Ip, that1.Ip)
	}
	if this.AgentHostName != that1.AgentHostName {
		return fmt.Errorf("AgentHostName this(%v) Not Equal that(%v)", this.AgentHostName, that1.AgentHostName)
	}
	if this.Reason != that1.Reason {
		return fmt.Errorf("Reason this(%v) Not Equal that(%v)", this.Reason, that1.Reason)
	}
	if this.CreatedAt != that1.CreatedAt {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	return nil
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TaskInfoId != that1.TaskInfoId {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.VersionId != that1.VersionId {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Stdout != that1.Stdout {
		return false
	}
	if this.Stderr != that1.Stderr {
		return false
	}
	if len(this.HostPorts) != len(that1.HostPorts) {
		return false
	}
	for i := range this.HostPorts {
		if this.HostPorts[i] != that1.HostPorts[i] {
			return false
		}
	}
	if this.OfferId != that1.OfferId {
		return false
	}
	if this.AgentId != that1.AgentId {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.AgentHostName != that1.AgentHostName {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *OfferAllocatorItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OfferAllocatorItem)
	if !ok {
		that2, ok := that.(OfferAllocatorItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OfferAllocatorItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OfferAllocatorItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OfferAllocatorItem but is not nil && this == nil")
	}
	if this.SlotId != that1.SlotId {
		return fmt.Errorf("SlotId this(%v) Not Equal that(%v)", this.SlotId, that1.SlotId)
	}
	if this.OfferId != that1.OfferId {
		return fmt.Errorf("OfferId this(%v) Not Equal that(%v)", this.OfferId, that1.OfferId)
	}
	return nil
}
func (this *OfferAllocatorItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OfferAllocatorItem)
	if !ok {
		that2, ok := that.(OfferAllocatorItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if this.OfferId != that1.OfferId {
		return false
	}
	return true
}
func (this *Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&types.Application{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.ProposedVersion != nil {
		s = append(s, "ProposedVersion: "+fmt.Sprintf("%#v", this.ProposedVersion)+",\n")
	}
	s = append(s, "ClusterId: "+fmt.Sprintf("%#v", this.ClusterId)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&types.Version{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "PerviousVersionID: "+fmt.Sprintf("%#v", this.PerviousVersionID)+",\n")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Cpus: "+fmt.Sprintf("%#v", this.Cpus)+",\n")
	s = append(s, "Mem: "+fmt.Sprintf("%#v", this.Mem)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Instances: "+fmt.Sprintf("%#v", this.Instances)+",\n")
	s = append(s, "RunAs: "+fmt.Sprintf("%#v", this.RunAs)+",\n")
	if this.Container != nil {
		s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	keysForEnv := make([]string, 0, len(this.Env))
	for k, _ := range this.Env {
		keysForEnv = append(keysForEnv, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnv)
	mapStringForEnv := "map[string]string{"
	for _, k := range keysForEnv {
		mapStringForEnv += fmt.Sprintf("%#v: %#v,", k, this.Env[k])
	}
	mapStringForEnv += "}"
	if this.Env != nil {
		s = append(s, "Env: "+mapStringForEnv+",\n")
	}
	if this.KillPolicy != nil {
		s = append(s, "KillPolicy: "+fmt.Sprintf("%#v", this.KillPolicy)+",\n")
	}
	if this.UpdatePolicy != nil {
		s = append(s, "UpdatePolicy: "+fmt.Sprintf("%#v", this.UpdatePolicy)+",\n")
	}
	s = append(s, "Constraints: "+fmt.Sprintf("%#v", this.Constraints)+",\n")
	s = append(s, "Uris: "+fmt.Sprintf("%#v", this.Uris)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Container) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Container{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Docker != nil {
		s = append(s, "Docker: "+fmt.Sprintf("%#v", this.Docker)+",\n")
	}
	if this.Volumes != nil {
		s = append(s, "Volumes: "+fmt.Sprintf("%#v", this.Volumes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Docker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&types.Docker{")
	s = append(s, "ForcePullImage: "+fmt.Sprintf("%#v", this.ForcePullImage)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	if this.PortMappings != nil {
		s = append(s, "PortMappings: "+fmt.Sprintf("%#v", this.PortMappings)+",\n")
	}
	s = append(s, "Privileged: "+fmt.Sprintf("%#v", this.Privileged)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.Parameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.PortMapping{")
	s = append(s, "ContainerPort: "+fmt.Sprintf("%#v", this.ContainerPort)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Volume) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Volume{")
	s = append(s, "ContainerPath: "+fmt.Sprintf("%#v", this.ContainerPath)+",\n")
	s = append(s, "HostPath: "+fmt.Sprintf("%#v", this.HostPath)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KillPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.KillPolicy{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.UpdatePolicy{")
	s = append(s, "UpdateDelay: "+fmt.Sprintf("%#v", this.UpdateDelay)+",\n")
	s = append(s, "MaxRetries: "+fmt.Sprintf("%#v", this.MaxRetries)+",\n")
	s = append(s, "MaxFailovers: "+fmt.Sprintf("%#v", this.MaxFailovers)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&types.HealthCheck{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "PortIndex: "+fmt.Sprintf("%#v", this.PortIndex)+",\n")
	s = append(s, "PortName: "+fmt.Sprintf("%#v", this.PortName)+",\n")
	if this.Command != nil {
		s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "ConsecutiveFailures: "+fmt.Sprintf("%#v", this.ConsecutiveFailures)+",\n")
	s = append(s, "GracePeriodSeconds: "+fmt.Sprintf("%#v", this.GracePeriodSeconds)+",\n")
	s = append(s, "IntervalSeconds: "+fmt.Sprintf("%#v", this.IntervalSeconds)+",\n")
	s = append(s, "TimeoutSeconds: "+fmt.Sprintf("%#v", this.TimeoutSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Command) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.Command{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Slot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&types.Slot{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "VersionId: "+fmt.Sprintf("%#v", this.VersionId)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "MarkForDeletion: "+fmt.Sprintf("%#v", this.MarkForDeletion)+",\n")
	s = append(s, "MarkForRollingUpdate: "+fmt.Sprintf("%#v", this.MarkForRollingUpdate)+",\n")
	s = append(s, "Healthy: "+fmt.Sprintf("%#v", this.Healthy)+",\n")
	if this.CurrentTask != nil {
		s = append(s, "CurrentTask: "+fmt.Sprintf("%#v", this.CurrentTask)+",\n")
	}
	if this.RestartPolicy != nil {
		s = append(s, "RestartPolicy: "+fmt.Sprintf("%#v", this.RestartPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RestartPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.RestartPolicy{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&types.Task{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TaskInfoId: "+fmt.Sprintf("%#v", this.TaskInfoId)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "VersionId: "+fmt.Sprintf("%#v", this.VersionId)+",\n")
	s = append(s, "SlotId: "+fmt.Sprintf("%#v", this.SlotId)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Stdout: "+fmt.Sprintf("%#v", this.Stdout)+",\n")
	s = append(s, "Stderr: "+fmt.Sprintf("%#v", this.Stderr)+",\n")
	s = append(s, "HostPorts: "+fmt.Sprintf("%#v", this.HostPorts)+",\n")
	s = append(s, "OfferId: "+fmt.Sprintf("%#v", this.OfferId)+",\n")
	s = append(s, "AgentId: "+fmt.Sprintf("%#v", this.AgentId)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "AgentHostName: "+fmt.Sprintf("%#v", this.AgentHostName)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OfferAllocatorItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.OfferAllocatorItem{")
	s = append(s, "SlotId: "+fmt.Sprintf("%#v", this.SlotId)+",\n")
	s = append(s, "OfferId: "+fmt.Sprintf("%#v", this.OfferId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApplication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringApplication(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Application) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Application) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Version != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(m.Version.Size()))
		n1, err := m.Version.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ProposedVersion != nil {
		data[i] = 0x22
		i++
		i = encodeVarintApplication(data, i, uint64(m.ProposedVersion.Size()))
		n2, err := m.ProposedVersion.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ClusterId) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ClusterId)))
		i += copy(data[i:], m.ClusterId)
	}
	if m.Priority != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintApplication(data, i, uint64(m.Priority))
	}
	if len(m.State) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if m.CreatedAt != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintApplication(data, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintApplication(data, i, uint64(m.UpdatedAt))
	}
	return i, nil
}

func (m *Version) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Version) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.PerviousVersionID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.PerviousVersionID)))
		i += copy(data[i:], m.PerviousVersionID)
	}
	if len(m.Command) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Command)))
		i += copy(data[i:], m.Command)
	}
	if m.Cpus != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.Cpus))))
	}
	if m.Mem != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.Mem))))
	}
	if m.Disk != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.Disk))))
	}
	if m.Instances != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintApplication(data, i, uint64(m.Instances))
	}
	if len(m.RunAs) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.RunAs)))
		i += copy(data[i:], m.RunAs)
	}
	if m.Container != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintApplication(data, i, uint64(m.Container.Size()))
		n3, err := m.Container.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x52
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			i = encodeVarintApplication(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintApplication(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintApplication(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			data[i] = 0x5a
			i++
			i = encodeVarintApplication(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			data[i] = 0x62
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			i = encodeVarintApplication(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintApplication(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintApplication(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.KillPolicy != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintApplication(data, i, uint64(m.KillPolicy.Size()))
		n4, err := m.KillPolicy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.UpdatePolicy != nil {
		data[i] = 0x72
		i++
		i = encodeVarintApplication(data, i, uint64(m.UpdatePolicy.Size()))
		n5, err := m.UpdatePolicy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Constraints) > 0 {
		for _, s := range m.Constraints {
			data[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Uris) > 0 {
		for _, s := range m.Uris {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Ip) > 0 {
		for _, s := range m.Ip {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Mode) > 0 {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Mode)))
		i += copy(data[i:], m.Mode)
	}
	if len(m.AppId) > 0 {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	return i, nil
}

func (m *Container) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Container) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if m.Docker != nil {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(m.Docker.Size()))
		n6, err := m.Docker.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Volumes) > 0 {
		for _, msg := range m.Volumes {
			data[i] = 0x1a
			i++
			i = encodeVarintApplication(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Docker) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Docker) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ForcePullImage {
		data[i] = 0x8
		i++
		if m.ForcePullImage {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Image) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Image)))
		i += copy(data[i:], m.Image)
	}
	if len(m.Network) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Network)))
		i += copy(data[i:], m.Network)
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			data[i] = 0x22
			i++
			i = encodeVarintApplication(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PortMappings) > 0 {
		for _, msg := range m.PortMappings {
			data[i] = 0x2a
			i++
			i = encodeVarintApplication(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Privileged {
		data[i] = 0x30
		i++
		if m.Privileged {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Parameter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Parameter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *PortMapping) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PortMapping) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerPort != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintApplication(data, i, uint64(m.ContainerPort))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Protocol) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Protocol)))
		i += copy(data[i:], m.Protocol)
	}
	return i, nil
}

func (m *Volume) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Volume) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerPath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ContainerPath)))
		i += copy(data[i:], m.ContainerPath)
	}
	if len(m.HostPath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.HostPath)))
		i += copy(data[i:], m.HostPath)
	}
	if len(m.Mode) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Mode)))
		i += copy(data[i:], m.Mode)
	}
	return i, nil
}

func (m *KillPolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KillPolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintApplication(data, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *UpdatePolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatePolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintApplication(data, i, uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintApplication(data, i, uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintApplication(data, i, uint64(m.MaxFailovers))
	}
	if len(m.Action) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	return i, nil
}

func (m *HealthCheck) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HealthCheck) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Address) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if len(m.Protocol) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Protocol)))
		i += copy(data[i:], m.Protocol)
	}
	if m.Port != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintApplication(data, i, uint64(m.Port))
	}
	if m.PortIndex != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintApplication(data, i, uint64(m.PortIndex))
	}
	if len(m.PortName) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.PortName)))
		i += copy(data[i:], m.PortName)
	}
	if m.Command != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintApplication(data, i, uint64(m.Command.Size()))
		n7, err := m.Command.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Path) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.ConsecutiveFailures != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintApplication(data, i, uint64(m.ConsecutiveFailures))
	}
	if m.GracePeriodSeconds != 0 {
		data[i] = 0x51
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.GracePeriodSeconds))))
	}
	if m.IntervalSeconds != 0 {
		data[i] = 0x59
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.IntervalSeconds))))
	}
	if m.TimeoutSeconds != 0 {
		data[i] = 0x61
		i++
		i = encodeFixed64Application(data, i, uint64(math.Float64bits(float64(m.TimeoutSeconds))))
	}
	return i, nil
}

func (m *Command) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Command) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *Slot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Slot) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintApplication(data, i, uint64(m.Index))
	}
	if len(m.Id) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.AppId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if len(m.VersionId) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.VersionId)))
		i += copy(data[i:], m.VersionId)
	}
	if len(m.State) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if m.MarkForDeletion {
		data[i] = 0x30
		i++
		if m.MarkForDeletion {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.MarkForRollingUpdate {
		data[i] = 0x38
		i++
		if m.MarkForRollingUpdate {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Healthy {
		data[i] = 0x40
		i++
		if m.Healthy {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.CurrentTask != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintApplication(data, i, uint64(m.CurrentTask.Size()))
		n8, err := m.CurrentTask.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.RestartPolicy != nil {
		data[i] = 0x52
		i++
		i = encodeVarintApplication(data, i, uint64(m.RestartPolicy.Size()))
		n9, err := m.RestartPolicy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *RestartPolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RestartPolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Task) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Task) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.TaskInfoId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.TaskInfoId)))
		i += copy(data[i:], m.TaskInfoId)
	}
	if len(m.AppId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if len(m.VersionId) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.VersionId)))
		i += copy(data[i:], m.VersionId)
	}
	if len(m.SlotId) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.SlotId)))
		i += copy(data[i:], m.SlotId)
	}
	if len(m.State) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.Stdout) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Stdout)))
		i += copy(data[i:], m.Stdout)
	}
	if len(m.Stderr) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Stderr)))
		i += copy(data[i:], m.Stderr)
	}
	if len(m.HostPorts) > 0 {
		for _, num := range m.HostPorts {
			data[i] = 0x48
			i++
			i = encodeVarintApplication(data, i, uint64(num))
		}
	}
	if len(m.OfferId) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.OfferId)))
		i += copy(data[i:], m.OfferId)
	}
	if len(m.AgentId) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.AgentId)))
		i += copy(data[i:], m.AgentId)
	}
	if len(m.Ip) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Ip)))
		i += copy(data[i:], m.Ip)
	}
	if len(m.AgentHostName) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.AgentHostName)))
		i += copy(data[i:], m.AgentHostName)
	}
	if len(m.Reason) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Reason)))
		i += copy(data[i:], m.Reason)
	}
	if m.CreatedAt != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintApplication(data, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *OfferAllocatorItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfferAllocatorItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SlotId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.SlotId)))
		i += copy(dAtA[i:], m.SlotId)
	}
	if len(m.OfferId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.OfferId)))
		i += copy(dAtA[i:], m.OfferId)
	}
	return i, nil
}

func encodeFixed64Application(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Application(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApplication(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplication(r randyApplication, easy bool) *Application {
	this := &Application{}
	this.ID = randStringApplication(r)
	this.Name = randStringApplication(r)
	if r.Intn(10) != 0 {
		this.Version = NewPopulatedVersion(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ProposedVersion = NewPopulatedVersion(r, easy)
	}
	this.ClusterId = randStringApplication(r)
	this.Priority = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Priority *= -1
	}
	this.State = randStringApplication(r)
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersion(r randyApplication, easy bool) *Version {
	this := &Version{}
	this.ID = randStringApplication(r)
	this.PerviousVersionID = randStringApplication(r)
	this.Command = randStringApplication(r)
	this.Cpus = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Cpus *= -1
	}
	this.Mem = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Mem *= -1
	}
	this.Disk = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Disk *= -1
	}
	this.Instances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Instances *= -1
	}
	this.RunAs = randStringApplication(r)
	if r.Intn(10) != 0 {
		this.Container = NewPopulatedContainer(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.Labels[randStringApplication(r)] = randStringApplication(r)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.HealthChecks = make([]*HealthCheck, v2)
		for i := 0; i < v2; i++ {
			this.HealthChecks[i] = NewPopulatedHealthCheck(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Env = make(map[string]string)
		for i := 0; i < v3; i++ {
			this.Env[randStringApplication(r)] = randStringApplication(r)
		}
	}
	if r.Intn(10) != 0 {
		this.KillPolicy = NewPopulatedKillPolicy(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatePolicy = NewPopulatedUpdatePolicy(r, easy)
	}
	v4 := r.Intn(10)
	this.Constraints = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Constraints[i] = randStringApplication(r)
	}
	v5 := r.Intn(10)
	this.Uris = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Uris[i] = randStringApplication(r)
	}
	v6 := r.Intn(10)
	this.Ip = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.Ip[i] = randStringApplication(r)
	}
	this.Mode = randStringApplication(r)
	this.AppId = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainer(r randyApplication, easy bool) *Container {
	this := &Container{}
	this.Type = randStringApplication(r)
	if r.Intn(10) != 0 {
		this.Docker = NewPopulatedDocker(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Volumes = make([]*Volume, v7)
		for i := 0; i < v7; i++ {
			this.Volumes[i] = NewPopulatedVolume(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDocker(r randyApplication, easy bool) *Docker {
	this := &Docker{}
	this.ForcePullImage = bool(bool(r.Intn(2) == 0))
	this.Image = randStringApplication(r)
	this.Network = randStringApplication(r)
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Parameters = make([]*Parameter, v8)
		for i := 0; i < v8; i++ {
			this.Parameters[i] = NewPopulatedParameter(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.PortMappings = make([]*PortMapping, v9)
		for i := 0; i < v9; i++ {
			this.PortMappings[i] = NewPopulatedPortMapping(r, easy)
		}
	}
	this.Privileged = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedParameter(r randyApplication, easy bool) *Parameter {
	this := &Parameter{}
	this.Key = randStringApplication(r)
	this.Value = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPortMapping(r randyApplication, easy bool) *PortMapping {
	this := &PortMapping{}
	this.ContainerPort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ContainerPort *= -1
	}
	this.Name = randStringApplication(r)
	this.Protocol = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVolume(r randyApplication, easy bool) *Volume {
	this := &Volume{}
	this.ContainerPath = randStringApplication(r)
	this.HostPath = randStringApplication(r)
	this.Mode = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKillPolicy(r randyApplication, easy bool) *KillPolicy {
	this := &KillPolicy{}
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdatePolicy(r randyApplication, easy bool) *UpdatePolicy {
	this := &UpdatePolicy{}
	this.UpdateDelay = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UpdateDelay *= -1
	}
	this.MaxRetries = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxRetries *= -1
	}
	this.MaxFailovers = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxFailovers *= -1
	}
	this.Action = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheck(r randyApplication, easy bool) *HealthCheck {
	this := &HealthCheck{}
	this.ID = randStringApplication(r)
	this.Address = randStringApplication(r)
	this.Protocol = randStringApplication(r)
	this.Port = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Port *= -1
	}
	this.PortIndex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PortIndex *= -1
	}
	this.PortName = randStringApplication(r)
	if r.Intn(10) != 0 {
		this.Command = NewPopulatedCommand(r, easy)
	}
	this.Path = randStringApplication(r)
	this.ConsecutiveFailures = uint32(r.Uint32())
	this.GracePeriodSeconds = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.GracePeriodSeconds *= -1
	}
	this.IntervalSeconds = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.IntervalSeconds *= -1
	}
	this.TimeoutSeconds = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.TimeoutSeconds *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommand(r randyApplication, easy bool) *Command {
	this := &Command{}
	this.Value = randStringApplication(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSlot(r randyApplication, easy bool) *Slot {
	this := &Slot{}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Id = randStringApplication(r)
	this.AppId = randStringApplication(r)
	this.VersionId = randStringApplication(r)
	this.State = randStringApplication(r)
	this.MarkForDeletion = bool(bool(r.Intn(2) == 0))
	this.MarkForRollingUpdate = bool(bool(r.Intn(2) == 0))
	this.Healthy = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CurrentTask = NewPopulatedTask(r, easy)
	}
	if r.Intn(10) != 0 {
		this.RestartPolicy = NewPopulatedRestartPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestartPolicy(r randyApplication, easy bool) *RestartPolicy {
	this := &RestartPolicy{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTask(r randyApplication, easy bool) *Task {
	this := &Task{}
	this.Id = randStringApplication(r)
	this.TaskInfoId = randStringApplication(r)
	this.AppId = randStringApplication(r)
	this.VersionId = randStringApplication(r)
	this.SlotId = randStringApplication(r)
	this.State = randStringApplication(r)
	this.Stdout = randStringApplication(r)
	this.Stderr = randStringApplication(r)
	v10 := r.Intn(10)
	this.HostPorts = make([]uint64, v10)
	for i := 0; i < v10; i++ {
		this.HostPorts[i] = uint64(uint64(r.Uint32()))
	}
	this.OfferId = randStringApplication(r)
	this.AgentId = randStringApplication(r)
	this.Ip = randStringApplication(r)
	this.AgentHostName = randStringApplication(r)
	this.Reason = randStringApplication(r)
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOfferAllocatorItem(r randyApplication, easy bool) *OfferAllocatorItem {
	this := &OfferAllocatorItem{}
	this.SlotId = string(randStringApplication(r))
	this.OfferId = string(randStringApplication(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplication interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplication(r randyApplication) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplication(r randyApplication) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneApplication(r)
	}
	return string(tmps)
}
func randUnrecognizedApplication(r randyApplication, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldApplication(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldApplication(data []byte, r randyApplication, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateApplication(data, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		data = encodeVarintPopulateApplication(data, uint64(v12))
	case 1:
		data = encodeVarintPopulateApplication(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateApplication(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateApplication(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateApplication(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateApplication(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.ProposedVersion != nil {
		l = m.ProposedVersion.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovApplication(uint64(m.Priority))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApplication(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApplication(uint64(m.UpdatedAt))
	}
	return n
}

func (m *Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.PerviousVersionID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Cpus != 0 {
		n += 9
	}
	if m.Mem != 0 {
		n += 9
	}
	if m.Disk != 0 {
		n += 9
	}
	if m.Instances != 0 {
		n += 1 + sovApplication(uint64(m.Instances))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplication(uint64(mapEntrySize))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApplication(uint64(len(k))) + 1 + len(v) + sovApplication(uint64(len(v)))
			n += mapEntrySize + 1 + sovApplication(uint64(mapEntrySize))
		}
	}
	if m.KillPolicy != nil {
		l = m.KillPolicy.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.UpdatePolicy != nil {
		l = m.UpdatePolicy.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, s := range m.Constraints {
			l = len(s)
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if len(m.Uris) > 0 {
		for _, s := range m.Uris {
			l = len(s)
			n += 2 + l + sovApplication(uint64(l))
		}
	}
	if len(m.Ip) > 0 {
		for _, s := range m.Ip {
			l = len(s)
			n += 2 + l + sovApplication(uint64(l))
		}
	}
	l = len(m.Mode)
	if l > 0 {
		n += 2 + l + sovApplication(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 2 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Container) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Docker != nil {
		l = m.Docker.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	return n
}

func (m *Docker) Size() (n int) {
	var l int
	_ = l
	if m.ForcePullImage {
		n += 2
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if len(m.PortMappings) > 0 {
		for _, e := range m.PortMappings {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	if m.Privileged {
		n += 2
	}
	return n
}

func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *PortMapping) Size() (n int) {
	var l int
	_ = l
	if m.ContainerPort != 0 {
		n += 1 + sovApplication(uint64(m.ContainerPort))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Volume) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainerPath)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.HostPath)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *KillPolicy) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovApplication(uint64(m.Duration))
	}
	return n
}

func (m *UpdatePolicy) Size() (n int) {
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		n += 1 + sovApplication(uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovApplication(uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		n += 1 + sovApplication(uint64(m.MaxFailovers))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *HealthCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovApplication(uint64(m.Port))
	}
	if m.PortIndex != 0 {
		n += 1 + sovApplication(uint64(m.PortIndex))
	}
	l = len(m.PortName)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.ConsecutiveFailures != 0 {
		n += 1 + sovApplication(uint64(m.ConsecutiveFailures))
	}
	if m.GracePeriodSeconds != 0 {
		n += 9
	}
	if m.IntervalSeconds != 0 {
		n += 9
	}
	if m.TimeoutSeconds != 0 {
		n += 9
	}
	return n
}

func (m *Command) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Slot) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovApplication(uint64(m.Index))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.MarkForDeletion {
		n += 2
	}
	if m.MarkForRollingUpdate {
		n += 2
	}
	if m.Healthy {
		n += 2
	}
	if m.CurrentTask != nil {
		l = m.CurrentTask.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.RestartPolicy != nil {
		l = m.RestartPolicy.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *RestartPolicy) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.TaskInfoId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.SlotId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.HostPorts) > 0 {
		for _, e := range m.HostPorts {
			n += 1 + sovApplication(uint64(e))
		}
	}
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.AgentId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.AgentHostName)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApplication(uint64(m.CreatedAt))
	}
	return n
}

func (m *OfferAllocatorItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.SlotId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposedVersion == nil {
				m.ProposedVersion = &Version{}
			}
			if err := m.ProposedVersion.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Priority |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerviousVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerviousVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Cpus = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Mem = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Disk = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Instances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = &Container{}
			}
			if err := m.Container.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApplication
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApplication
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Labels[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Labels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &HealthCheck{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApplication
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApplication
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Env[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Env[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillPolicy == nil {
				m.KillPolicy = &KillPolicy{}
			}
			if err := m.KillPolicy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatePolicy == nil {
				m.UpdatePolicy = &UpdatePolicy{}
			}
			if err := m.UpdatePolicy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uris = append(m.Uris, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Container) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Docker == nil {
				m.Docker = &Docker{}
			}
			if err := m.Docker.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Docker) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Docker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Docker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePullImage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePullImage = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortMappings = append(m.PortMappings, &PortMapping{})
			if err := m.PortMappings[len(m.PortMappings)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMapping) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			m.ContainerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ContainerPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Volume) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillPolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDelay", wireType)
			}
			m.UpdateDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdateDelay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxRetries |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFailovers", wireType)
			}
			m.MaxFailovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxFailovers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortIndex", wireType)
			}
			m.PortIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PortIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &Command{}
			}
			if err := m.Command.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveFailures", wireType)
			}
			m.ConsecutiveFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ConsecutiveFailures |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.GracePeriodSeconds = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.IntervalSeconds = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.TimeoutSeconds = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Slot) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkForDeletion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkForDeletion = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkForRollingUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkForRollingUpdate = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Healthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Healthy = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentTask == nil {
				m.CurrentTask = &Task{}
			}
			if err := m.CurrentTask.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestartPolicy == nil {
				m.RestartPolicy = &RestartPolicy{}
			}
			if err := m.RestartPolicy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestartPolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestartPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestartPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfoId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPorts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostPorts = append(m.HostPorts, v)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentHostName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
<<<<<<< 789bbe7c31139de5500f7a90b643d43d88ec17bd
func (m *OfferAllocatorItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfferAllocatorItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfferAllocatorItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
=======
func skipApplication(data []byte) (n int, err error) {
	l := len(data)
>>>>>>> add `priority` for app
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("application.proto", fileDescriptorApplication) }

var fileDescriptorApplication = []byte{
<<<<<<< 789bbe7c31139de5500f7a90b643d43d88ec17bd
	// 1350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xaf, 0xed, 0xd8, 0xb1, 0xc7, 0x76, 0xd2, 0x4c, 0x23, 0xba, 0x44, 0x28, 0xad, 0x56, 0x05,
	0x82, 0x04, 0x01, 0x5a, 0xa9, 0x94, 0xde, 0xd2, 0xa4, 0x55, 0x2d, 0xfe, 0x45, 0x53, 0x5a, 0x71,
	0xa2, 0xda, 0x7a, 0x27, 0xce, 0xca, 0xeb, 0x9d, 0xd5, 0xec, 0xac, 0x69, 0xbe, 0x00, 0x27, 0xf8,
	0x04, 0x7c, 0x01, 0x3e, 0x02, 0x1f, 0xa1, 0x47, 0xae, 0x5c, 0x50, 0xdb, 0x23, 0x12, 0x12, 0x47,
	0x8e, 0xbc, 0xf7, 0x66, 0xf6, 0x9f, 0x49, 0x11, 0x70, 0xb0, 0x3c, 0xef, 0xf7, 0xde, 0xdb, 0x99,
	0xf9, 0xbd, 0x7f, 0xc3, 0xb6, 0x82, 0x34, 0x8d, 0xa3, 0x69, 0x60, 0x22, 0x95, 0xec, 0xa7, 0x5a,
	0x19, 0xc5, 0xbb, 0xe6, 0x2c, 0x95, 0xd9, 0xce, 0xf6, 0x4c, 0xcd, 0x14, 0x21, 0xef, 0xe3, 0xca,
	0x2a, 0xfd, 0xef, 0xdb, 0x6c, 0x78, 0x50, 0xb9, 0xf0, 0xd7, 0x58, 0x3b, 0x0a, 0xbd, 0xd6, 0xd5,
	0xd6, 0xde, 0xe0, 0x4e, 0xef, 0xe5, 0xaf, 0x57, 0xda, 0x93, 0x23, 0x01, 0x08, 0xe7, 0x6c, 0x2d,
	0x09, 0x16, 0xd2, 0x6b, 0xa3, 0x46, 0xd0, 0x9a, 0xef, 0xb1, 0xf5, 0xa5, 0xd4, 0x19, 0xb8, 0x79,
	0x1d, 0x80, 0x87, 0xd7, 0x37, 0xf6, 0x69, 0xab, 0xfd, 0x47, 0x16, 0x15, 0x85, 0x9a, 0xdf, 0x62,
	0x9b, 0xb0, 0x5d, 0xaa, 0x32, 0x19, 0x3a, 0x9d, 0xb7, 0x76, 0xae, 0xc7, 0xaa, 0x19, 0x7f, 0x83,
	0x0d, 0xa6, 0x71, 0x9e, 0x19, 0xa9, 0x27, 0xa1, 0xd7, 0xa5, 0xcd, 0x2b, 0x80, 0x6f, 0xb3, 0x6e,
	0x66, 0x02, 0x23, 0xbd, 0x1e, 0x69, 0xac, 0x40, 0x3e, 0x5a, 0xc2, 0x2a, 0x3c, 0x30, 0xde, 0x3a,
	0x68, 0x3a, 0xa2, 0x02, 0x50, 0x9b, 0xa7, 0xa1, 0xd3, 0xf6, 0xad, 0xb6, 0x04, 0xfc, 0xdf, 0xbb,
	0x6c, 0xbd, 0xd8, 0xfb, 0x55, 0x5c, 0xbc, 0xcb, 0xb6, 0x52, 0xa9, 0x97, 0x91, 0xca, 0x33, 0x67,
	0x3a, 0x39, 0x72, 0xc4, 0xfc, 0x5d, 0xc1, 0x3d, 0xb6, 0x3e, 0x55, 0x8b, 0x45, 0x90, 0x84, 0xc4,
	0xd2, 0x40, 0x14, 0x22, 0x72, 0x3a, 0x4d, 0xf3, 0x8c, 0xa8, 0x68, 0x09, 0x5a, 0xf3, 0x8b, 0xac,
	0xb3, 0x90, 0x0b, 0xba, 0x69, 0x4b, 0xe0, 0x12, 0xad, 0xc2, 0x28, 0x9b, 0xd3, 0x15, 0xc1, 0x0a,
	0xd7, 0x78, 0x87, 0x28, 0x81, 0xcb, 0x26, 0x53, 0x99, 0xd1, 0x0d, 0xbb, 0xa2, 0x02, 0x90, 0x15,
	0x9d, 0x27, 0x07, 0x19, 0xdd, 0x0e, 0x58, 0x21, 0x81, 0xef, 0x03, 0x2b, 0x2a, 0x31, 0x41, 0x94,
	0x48, 0xed, 0x0d, 0x88, 0xfd, 0x8b, 0x8e, 0xfd, 0xc3, 0x02, 0x17, 0x95, 0x09, 0xbf, 0xce, 0x7a,
	0x71, 0xf0, 0x44, 0xc6, 0x99, 0xc7, 0xae, 0x76, 0xc0, 0x78, 0xa7, 0x19, 0xaa, 0xfd, 0x4f, 0x49,
	0x79, 0x37, 0x31, 0xfa, 0x4c, 0x38, 0x4b, 0x7e, 0x93, 0x8d, 0x4e, 0x65, 0x10, 0x9b, 0xd3, 0xc3,
	0x53, 0x39, 0x9d, 0x67, 0xde, 0x90, 0x3c, 0xb9, 0xf3, 0xbc, 0x5f, 0xa9, 0x44, 0xc3, 0x8e, 0xbf,
	0xc3, 0x3a, 0x32, 0x59, 0x7a, 0x23, 0x32, 0xbf, 0xbc, 0xb2, 0xd1, 0xdd, 0x64, 0x69, 0x77, 0x41,
	0x1b, 0xfe, 0x21, 0x63, 0xf3, 0x28, 0x8e, 0x8f, 0x15, 0xa4, 0xec, 0x99, 0x37, 0xa6, 0x7b, 0x6c,
	0x39, 0x8f, 0x4f, 0x4a, 0x85, 0xa8, 0x19, 0xf1, 0x8f, 0xd8, 0xc8, 0x06, 0xd8, 0x39, 0x6d, 0x90,
	0xd3, 0x25, 0xe7, 0xf4, 0xb0, 0xa6, 0x12, 0x0d, 0x43, 0x7e, 0x95, 0x0d, 0x81, 0x8f, 0xcc, 0x68,
	0x60, 0xc4, 0x64, 0xde, 0x26, 0x1c, 0x6f, 0x20, 0xea, 0x10, 0x06, 0x27, 0xd7, 0x51, 0xe6, 0x5d,
	0x24, 0x15, 0xad, 0xf9, 0x06, 0xa4, 0x4d, 0xea, 0x6d, 0x11, 0x02, 0x2b, 0xb4, 0x59, 0xa8, 0x50,
	0x7a, 0xdc, 0x96, 0x0e, 0xae, 0x31, 0x44, 0x50, 0xa8, 0x90, 0xd2, 0x97, 0x6c, 0x88, 0x48, 0xd8,
	0xf9, 0x98, 0x0d, 0x6b, 0xac, 0x62, 0x2e, 0xcc, 0xe5, 0x99, 0x4d, 0x40, 0x81, 0x4b, 0x74, 0x5b,
	0x06, 0x71, 0x5e, 0x94, 0xa1, 0x15, 0x6e, 0xb7, 0x6f, 0xb5, 0x76, 0x6e, 0xb2, 0x7e, 0xc1, 0xd3,
	0x7f, 0xf1, 0xf3, 0x15, 0x1b, 0x94, 0xd1, 0xc7, 0x93, 0x22, 0x27, 0xce, 0x93, 0xd6, 0xfc, 0x4d,
	0xd6, 0x0b, 0xd5, 0x74, 0x0e, 0x39, 0xd3, 0x26, 0xda, 0xc6, 0x8e, 0xb6, 0x23, 0x02, 0x85, 0x53,
	0xf2, 0xb7, 0xa1, 0x17, 0xa8, 0x38, 0x5f, 0x40, 0x3e, 0x76, 0x28, 0x8a, 0x85, 0xdd, 0x23, 0x42,
	0x45, 0xa1, 0xf5, 0x7f, 0x6b, 0xb1, 0x9e, 0xf5, 0xe5, 0x6f, 0xb1, 0x8d, 0x13, 0xa5, 0xa7, 0xf2,
	0x38, 0x8f, 0xe3, 0xc9, 0x22, 0x98, 0xd9, 0x8d, 0xfb, 0x62, 0x05, 0xc5, 0xd3, 0x47, 0xa4, 0x76,
	0xa7, 0x27, 0x01, 0xeb, 0x2a, 0x91, 0xe6, 0x1b, 0xa5, 0xe7, 0x45, 0x5d, 0x39, 0x91, 0x7f, 0xc0,
	0x58, 0x1a, 0x68, 0xe8, 0x50, 0xd0, 0x24, 0xb0, 0xba, 0x3a, 0xb5, 0x54, 0x3f, 0x2e, 0x14, 0xa2,
	0x66, 0x83, 0x79, 0x9b, 0x2a, 0x6d, 0x3e, 0x83, 0x30, 0x44, 0xc9, 0x2c, 0x83, 0xf2, 0xab, 0xe7,
	0xed, 0x71, 0xa5, 0x12, 0x0d, 0x3b, 0xbe, 0x0b, 0x3b, 0xe9, 0x68, 0x19, 0xc5, 0x72, 0x26, 0x43,
	0xaa, 0xd0, 0xbe, 0xa8, 0x21, 0xfe, 0x0d, 0x36, 0x28, 0x37, 0xfc, 0xb7, 0x61, 0xf1, 0xa7, 0x6c,
	0x58, 0xdb, 0x91, 0x5f, 0x63, 0xe3, 0xb2, 0x28, 0x11, 0xa7, 0x0f, 0x74, 0x45, 0x13, 0x3c, 0xb7,
	0x3f, 0xef, 0xb0, 0x3e, 0x35, 0xf9, 0xa9, 0x8a, 0x1d, 0x45, 0xa5, 0xec, 0x7f, 0xcd, 0x7a, 0x36,
	0x32, 0xcd, 0xef, 0x07, 0xe6, 0xd4, 0x1d, 0xb0, 0x09, 0xe2, 0xb7, 0x4e, 0x55, 0x66, 0xc8, 0xc0,
	0xee, 0x51, 0xca, 0x65, 0x82, 0x77, 0xaa, 0x04, 0xf7, 0xf7, 0x18, 0xab, 0xaa, 0x11, 0xbd, 0xc3,
	0x5c, 0xd3, 0x84, 0xa1, 0xcf, 0x77, 0x44, 0x29, 0xfb, 0xdf, 0xb5, 0xd8, 0xe8, 0xe1, 0x4a, 0xd5,
	0xd9, 0x2a, 0x3c, 0x92, 0x71, 0x70, 0xe6, 0xae, 0x5b, 0x87, 0x90, 0xf6, 0x45, 0xf0, 0x54, 0x48,
	0xa3, 0x23, 0xc8, 0xb7, 0x36, 0x19, 0xd4, 0x10, 0xee, 0xb3, 0x11, 0x48, 0xf7, 0x82, 0x28, 0x56,
	0x38, 0x81, 0xe8, 0x60, 0x5d, 0xd1, 0xc0, 0xa0, 0xb9, 0xf7, 0x82, 0xa9, 0x29, 0x26, 0xd1, 0x40,
	0x38, 0xc9, 0xff, 0xa1, 0xc3, 0x86, 0xb5, 0x46, 0xf5, 0xca, 0x21, 0x00, 0xe9, 0x17, 0x84, 0xa1,
	0x96, 0x59, 0xe6, 0xf8, 0x28, 0xc4, 0x7f, 0xa2, 0x1d, 0xa9, 0xc2, 0x04, 0xa2, 0x3d, 0xbb, 0x82,
	0xd6, 0xd8, 0xcc, 0xf1, 0x7f, 0x92, 0x84, 0xf2, 0x29, 0x35, 0x7e, 0x68, 0xe6, 0x25, 0x40, 0x5f,
	0x03, 0xe1, 0x73, 0x0c, 0x6e, 0xcf, 0x7d, 0xcd, 0xc9, 0x38, 0x80, 0x8b, 0xd1, 0xb2, 0xde, 0x18,
	0xa7, 0x87, 0x16, 0x6d, 0x8c, 0x9a, 0x14, 0x43, 0x67, 0x27, 0x02, 0xad, 0xa1, 0x4c, 0x2e, 0x61,
	0x2b, 0x93, 0xd3, 0xdc, 0x44, 0x4b, 0x89, 0xcc, 0xe4, 0x70, 0x7e, 0x1a, 0x0d, 0x63, 0x71, 0x9e,
	0x0a, 0x46, 0x08, 0x9f, 0xe9, 0x00, 0x4a, 0x53, 0xea, 0x48, 0x85, 0x0f, 0x24, 0xd8, 0x84, 0x38,
	0x1e, 0x70, 0x30, 0x9d, 0xa3, 0x81, 0xf3, 0x6d, 0x42, 0x97, 0x84, 0x89, 0x18, 0xc4, 0x85, 0xf1,
	0x90, 0x8c, 0x57, 0x61, 0x6c, 0x05, 0x26, 0x5a, 0x48, 0x95, 0x9b, 0xc2, 0x70, 0x44, 0x86, 0x2b,
	0xa8, 0x7f, 0x85, 0xad, 0xbb, 0xbb, 0x55, 0xc5, 0xd3, 0xaa, 0x17, 0xcf, 0x2f, 0x6d, 0xb6, 0xf6,
	0x20, 0x56, 0x86, 0x9a, 0x06, 0x31, 0x6a, 0xf3, 0xc7, 0x0a, 0xd4, 0x9b, 0x43, 0x17, 0x30, 0x8c,
	0x62, 0xd9, 0x87, 0x3b, 0xb5, 0x3e, 0x8c, 0x11, 0x71, 0x2f, 0x17, 0xd0, 0xd8, 0xf4, 0xa8, 0x80,
	0xea, 0xd1, 0xd1, 0xad, 0x3f, 0x3a, 0xe0, 0xae, 0x8b, 0x40, 0xcf, 0xef, 0x29, 0x0d, 0x39, 0x2a,
	0x29, 0xb1, 0x6c, 0x3f, 0x58, 0x85, 0x61, 0xb0, 0x6e, 0x3b, 0x48, 0xa8, 0x38, 0x86, 0x12, 0xb7,
	0xd9, 0x4f, 0x21, 0xec, 0x8b, 0x73, 0x75, 0x98, 0x6d, 0x76, 0x60, 0x9e, 0x51, 0x08, 0xfb, 0xa2,
	0x10, 0xf9, 0x7b, 0x6c, 0x78, 0x98, 0x6b, 0x2d, 0x13, 0xf3, 0x65, 0x00, 0xaf, 0x04, 0x3b, 0xd8,
	0x87, 0x2e, 0x0f, 0x10, 0x12, 0x75, 0x3d, 0xbf, 0xcd, 0xc6, 0x10, 0x49, 0x13, 0x68, 0xe3, 0x86,
	0x21, 0x23, 0x87, 0x6d, 0xe7, 0x20, 0xea, 0x3a, 0xd1, 0x34, 0xf5, 0x37, 0xd9, 0xb8, 0xa1, 0xf7,
	0xbf, 0xed, 0xb0, 0x35, 0xfa, 0xea, 0x46, 0x55, 0x24, 0x44, 0x2b, 0x14, 0xa8, 0x01, 0x7c, 0x92,
	0x9c, 0xa8, 0x49, 0x41, 0x77, 0x0d, 0xf9, 0x5f, 0xb4, 0x43, 0xc1, 0x66, 0x10, 0xd8, 0xf2, 0x19,
	0xe8, 0xa4, 0x57, 0xbc, 0x01, 0xd1, 0xda, 0x84, 0x90, 0x39, 0x44, 0x2b, 0x5a, 0x93, 0xe4, 0x70,
	0xa9, 0xb5, 0x2b, 0x05, 0x27, 0xe1, 0xde, 0xd4, 0xcf, 0xa0, 0xb4, 0xb0, 0x04, 0x3a, 0x7b, 0x6b,
	0xa2, 0x02, 0x90, 0x7e, 0x75, 0x72, 0x42, 0x6f, 0x50, 0x66, 0x8b, 0xdd, 0x89, 0xd4, 0x06, 0x66,
	0x40, 0x2e, 0x68, 0x86, 0xae, 0x0d, 0x58, 0xd1, 0x3d, 0x03, 0x46, 0x8e, 0x93, 0x14, 0xfb, 0x2c,
	0xa9, 0xee, 0xc3, 0x57, 0xa9, 0x9a, 0xc7, 0xb6, 0xcf, 0x36, 0x40, 0x3c, 0x1f, 0xbc, 0x54, 0x33,
	0xc8, 0x9e, 0x0d, 0x7b, 0x3e, 0x2b, 0x35, 0xdf, 0xb4, 0x9b, 0x2b, 0x6f, 0x5a, 0xff, 0x3e, 0xe3,
	0x5f, 0xe0, 0x81, 0x0e, 0xe2, 0x58, 0xc1, 0x43, 0x5e, 0xe9, 0x89, 0x81, 0x97, 0xe3, 0x65, 0xb6,
	0x8e, 0x1c, 0x3d, 0x2e, 0x43, 0x53, 0x50, 0xf6, 0x3a, 0xeb, 0xd3, 0xf9, 0x1f, 0x97, 0xb5, 0x50,
	0xdc, 0xe7, 0xce, 0xb5, 0x67, 0x2f, 0x76, 0x2f, 0x3c, 0x7f, 0xb1, 0xdb, 0xfa, 0x03, 0x7e, 0x7f,
	0xc2, 0xef, 0xc7, 0x97, 0xbb, 0xad, 0x9f, 0xe0, 0xf7, 0x0c, 0x7e, 0x3f, 0xc3, 0xef, 0x39, 0xfc,
	0xbe, 0xba, 0xf0, 0xa4, 0x47, 0x2d, 0xed, 0xc6, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xe2,
	0xc1, 0x54, 0x70, 0x0c, 0x00, 0x00,
=======
	// 1331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x8e, 0x1b, 0xc5,
	0x13, 0x8f, 0xed, 0xb5, 0xd7, 0x6e, 0x7f, 0x6c, 0xb6, 0xb3, 0xfa, 0xff, 0x47, 0x2b, 0xb4, 0x89,
	0x46, 0x01, 0x16, 0x09, 0x16, 0x48, 0xa4, 0x10, 0x72, 0x4b, 0x76, 0x13, 0xc5, 0xe2, 0x43, 0xab,
	0x0e, 0x89, 0x38, 0x21, 0x4d, 0x3c, 0xbd, 0xde, 0x91, 0xc7, 0xd3, 0xa3, 0x9e, 0x1e, 0x13, 0xbf,
	0x00, 0x27, 0xde, 0x80, 0x17, 0x80, 0x37, 0xe0, 0x11, 0x72, 0xe4, 0xca, 0x05, 0x25, 0x39, 0x22,
	0x21, 0x71, 0xe4, 0x48, 0x55, 0x75, 0xcf, 0x97, 0xd9, 0x20, 0xe0, 0x60, 0xb9, 0xeb, 0x57, 0x55,
	0xd3, 0xdd, 0xbf, 0xfa, 0x6a, 0xb6, 0x1b, 0xa4, 0x69, 0x1c, 0xcd, 0x02, 0x13, 0xa9, 0xe4, 0x28,
	0xd5, 0xca, 0x28, 0xde, 0x35, 0xeb, 0x54, 0x66, 0xfb, 0x7b, 0x73, 0x35, 0x57, 0x84, 0xbc, 0x8f,
	0x2b, 0xab, 0xf4, 0x7f, 0x68, 0xb3, 0xe1, 0xdd, 0xca, 0x85, 0xff, 0x8f, 0xb5, 0xa3, 0xd0, 0x6b,
	0x5d, 0x6b, 0x1d, 0x0e, 0xee, 0xf5, 0x5e, 0xfd, 0x72, 0xb5, 0x3d, 0x3d, 0x11, 0x80, 0x70, 0xce,
	0xb6, 0x92, 0x60, 0x29, 0xbd, 0x36, 0x6a, 0x04, 0xad, 0xf9, 0x21, 0xdb, 0x5e, 0x49, 0x9d, 0x81,
	0x9b, 0xd7, 0x01, 0x78, 0x78, 0x63, 0x72, 0x44, 0x5b, 0x1d, 0x3d, 0xb1, 0xa8, 0x28, 0xd4, 0xfc,
	0x36, 0xdb, 0x81, 0xed, 0x52, 0x95, 0xc9, 0xd0, 0xe9, 0xbc, 0xad, 0x0b, 0x3d, 0x36, 0xcd, 0xf8,
	0x1b, 0x6c, 0x30, 0x8b, 0xf3, 0xcc, 0x48, 0x3d, 0x0d, 0xbd, 0x2e, 0x6d, 0x5e, 0x01, 0x7c, 0x9f,
	0xf5, 0x53, 0x1d, 0x29, 0x1d, 0x99, 0xb5, 0xd7, 0x03, 0x65, 0x47, 0x94, 0x32, 0xdf, 0x63, 0xdd,
	0xcc, 0x04, 0x46, 0x7a, 0xdb, 0xe4, 0x65, 0x05, 0xfa, 0x9e, 0x96, 0xb0, 0x0a, 0xef, 0x1a, 0xaf,
	0x4f, 0x2e, 0x15, 0x80, 0xda, 0x3c, 0x0d, 0x9d, 0x76, 0x60, 0xb5, 0x25, 0xe0, 0xff, 0xd6, 0x65,
	0xdb, 0xc5, 0xb9, 0x5e, 0xc7, 0xd3, 0xbb, 0x6c, 0x37, 0x95, 0x7a, 0x15, 0xa9, 0x3c, 0x73, 0xa6,
	0xd3, 0x13, 0x47, 0xda, 0x5f, 0x15, 0xdc, 0x63, 0xdb, 0x33, 0xb5, 0x5c, 0x06, 0x49, 0x48, 0x0c,
	0x0e, 0x44, 0x21, 0x22, 0xdf, 0xb3, 0x34, 0xcf, 0x88, 0xa6, 0x96, 0xa0, 0x35, 0xbf, 0xcc, 0x3a,
	0x4b, 0xb9, 0x24, 0x16, 0x5a, 0x02, 0x97, 0x68, 0x15, 0x46, 0xd9, 0x82, 0xee, 0x0e, 0x56, 0xb8,
	0xc6, 0x3b, 0x44, 0x09, 0x5c, 0x36, 0x99, 0xc9, 0x8c, 0xee, 0xde, 0x15, 0x15, 0x80, 0xac, 0xe8,
	0x3c, 0xb9, 0x9b, 0xd1, 0xdd, 0x81, 0x15, 0x12, 0xf8, 0x11, 0xb0, 0xa2, 0x12, 0x13, 0x44, 0x89,
	0xd4, 0x74, 0xef, 0xe1, 0x8d, 0xcb, 0x2e, 0x32, 0xc7, 0x05, 0x2e, 0x2a, 0x13, 0x7e, 0x83, 0xf5,
	0xe2, 0xe0, 0xa9, 0x8c, 0x33, 0x8f, 0x5d, 0xeb, 0x80, 0xf1, 0x7e, 0x33, 0x8c, 0x47, 0x9f, 0x92,
	0xf2, 0x7e, 0x62, 0xf4, 0x5a, 0x38, 0x4b, 0x7e, 0x8b, 0x8d, 0xce, 0x65, 0x10, 0x9b, 0xf3, 0xe3,
	0x73, 0x39, 0x5b, 0x64, 0xde, 0x90, 0x3c, 0xb9, 0xf3, 0x7c, 0x58, 0xa9, 0x44, 0xc3, 0x8e, 0xbf,
	0xc3, 0x3a, 0x32, 0x59, 0x79, 0x23, 0x32, 0xff, 0xff, 0xc6, 0x46, 0xf7, 0x93, 0x95, 0xdd, 0x05,
	0x6d, 0xf8, 0x87, 0x8c, 0x2d, 0xa2, 0x38, 0x3e, 0x55, 0x90, 0xce, 0x6b, 0x6f, 0x4c, 0xf7, 0xd8,
	0x75, 0x1e, 0x9f, 0x94, 0x0a, 0x51, 0x33, 0xe2, 0x1f, 0xb1, 0x91, 0x0d, 0xb0, 0x73, 0x9a, 0x90,
	0xd3, 0x15, 0xe7, 0xf4, 0xb8, 0xa6, 0x12, 0x0d, 0x43, 0x7e, 0x8d, 0x0d, 0x81, 0x8f, 0xcc, 0x68,
	0x60, 0xc4, 0x64, 0xde, 0x0e, 0x1c, 0x6f, 0x20, 0xea, 0x10, 0x06, 0x27, 0xd7, 0x51, 0xe6, 0x5d,
	0x26, 0x15, 0xad, 0xf9, 0x04, 0xd2, 0x26, 0xf5, 0x76, 0x09, 0x81, 0x15, 0xda, 0x2c, 0x55, 0x28,
	0x3d, 0x6e, 0xcb, 0x0a, 0xd7, 0x18, 0x22, 0x28, 0x62, 0x48, 0xf7, 0x2b, 0x36, 0x44, 0x24, 0xec,
	0x7f, 0xcc, 0x86, 0x35, 0x56, 0x31, 0x17, 0x16, 0x72, 0x6d, 0x13, 0x50, 0xe0, 0x12, 0xdd, 0x56,
	0x41, 0x9c, 0x17, 0x25, 0x6a, 0x85, 0x3b, 0xed, 0xdb, 0xad, 0xfd, 0x5b, 0xac, 0x5f, 0xf0, 0xf4,
	0x6f, 0xfc, 0x7c, 0xc5, 0x06, 0x65, 0xf4, 0xf1, 0xa4, 0xc8, 0x89, 0xf3, 0xa4, 0x35, 0x7f, 0x93,
	0xf5, 0x42, 0x35, 0x5b, 0x40, 0xce, 0xb4, 0x89, 0xb6, 0xb1, 0xa3, 0xed, 0x84, 0x40, 0xe1, 0x94,
	0xfc, 0x6d, 0xe8, 0x13, 0x2a, 0xce, 0x97, 0x90, 0x8f, 0x1d, 0x8a, 0x62, 0x61, 0xf7, 0x84, 0x50,
	0x51, 0x68, 0xfd, 0x5f, 0x5b, 0xac, 0x67, 0x7d, 0xf9, 0x5b, 0x6c, 0x72, 0xa6, 0xf4, 0x4c, 0x9e,
	0xe6, 0x71, 0x3c, 0x5d, 0x06, 0x73, 0xbb, 0x71, 0x5f, 0x6c, 0xa0, 0x78, 0xfa, 0x88, 0xd4, 0xee,
	0xf4, 0x24, 0x60, 0x5d, 0x25, 0xd2, 0x7c, 0xad, 0xf4, 0xa2, 0xa8, 0x2b, 0x27, 0xf2, 0x0f, 0x18,
	0x4b, 0x03, 0x0d, 0xdd, 0x0b, 0x1a, 0x08, 0x56, 0x57, 0xa7, 0x96, 0xea, 0xa7, 0x85, 0x42, 0xd4,
	0x6c, 0x30, 0x6f, 0x53, 0xa5, 0xcd, 0x67, 0x10, 0x86, 0x28, 0x99, 0x67, 0x50, 0x7e, 0xf5, 0xbc,
	0x3d, 0xad, 0x54, 0xa2, 0x61, 0xc7, 0x0f, 0x60, 0x27, 0x1d, 0xad, 0xa2, 0x58, 0xce, 0x65, 0x48,
	0x15, 0xda, 0x17, 0x35, 0xc4, 0xbf, 0xc9, 0x06, 0xe5, 0x86, 0xff, 0x34, 0x2c, 0xfe, 0x8c, 0x0d,
	0x6b, 0x3b, 0xf2, 0xeb, 0x6c, 0x5c, 0x16, 0x25, 0xe2, 0xf4, 0x81, 0xae, 0x68, 0x82, 0x17, 0xf6,
	0x6e, 0xea, 0x9c, 0x30, 0x00, 0x66, 0x2a, 0x76, 0x14, 0x95, 0xb2, 0xff, 0x15, 0xeb, 0xd9, 0xc8,
	0x34, 0xbf, 0x1f, 0x98, 0x73, 0x77, 0xc0, 0x26, 0x88, 0xdf, 0x3a, 0x57, 0x99, 0x21, 0x03, 0xbb,
	0x47, 0x29, 0x97, 0x09, 0xde, 0xa9, 0x12, 0xdc, 0x3f, 0x64, 0xac, 0xaa, 0x46, 0xf4, 0x0e, 0x73,
	0x4d, 0xd3, 0x87, 0x3e, 0x0f, 0x3d, 0xbc, 0x90, 0xfd, 0x6f, 0x5b, 0x6c, 0xf4, 0x78, 0xa3, 0xea,
	0x6c, 0x15, 0x9e, 0xc8, 0x38, 0x58, 0xbb, 0xeb, 0xd6, 0x21, 0xa4, 0x7d, 0x19, 0x3c, 0x13, 0xd2,
	0xe8, 0x08, 0xf2, 0xad, 0x4d, 0x06, 0x35, 0x84, 0xfb, 0x6c, 0x04, 0xd2, 0x83, 0x20, 0x8a, 0x15,
	0x4e, 0x27, 0x3a, 0x58, 0x57, 0x34, 0x30, 0x68, 0xee, 0xbd, 0x60, 0x66, 0x8a, 0x29, 0x35, 0x10,
	0x4e, 0xf2, 0xbf, 0xeb, 0xb0, 0x61, 0xad, 0x51, 0xbd, 0x76, 0x08, 0x40, 0xfa, 0x05, 0x61, 0xa8,
	0x65, 0x96, 0x39, 0x3e, 0x0a, 0xf1, 0xef, 0x68, 0x47, 0xaa, 0x30, 0x81, 0x68, 0xcf, 0xae, 0xa0,
	0x35, 0x36, 0x73, 0xfc, 0x9f, 0x26, 0xa1, 0x7c, 0x46, 0x8d, 0x1f, 0x9a, 0x79, 0x09, 0xd0, 0xd7,
	0x40, 0xf8, 0x1c, 0x83, 0xdb, 0x73, 0x5f, 0x73, 0x32, 0x0e, 0xe7, 0x62, 0xb4, 0x6c, 0x37, 0x46,
	0xed, 0xb1, 0x45, 0x1b, 0xa3, 0x26, 0xc5, 0xd0, 0xd9, 0x89, 0x40, 0x6b, 0x28, 0x93, 0x2b, 0xd8,
	0xca, 0xe4, 0x2c, 0x37, 0xd1, 0x4a, 0x22, 0x33, 0x39, 0x9c, 0x9f, 0x46, 0xc3, 0x58, 0x5c, 0xa4,
	0x82, 0x11, 0xc2, 0xe7, 0x3a, 0x80, 0xd2, 0x94, 0x30, 0x80, 0xc3, 0x47, 0x12, 0x6c, 0x42, 0x1c,
	0x0f, 0x38, 0x98, 0x2e, 0xd0, 0xc0, 0xf9, 0x76, 0xa0, 0x4b, 0xc2, 0x44, 0x0c, 0xe2, 0xc2, 0x78,
	0x48, 0xc6, 0x9b, 0x30, 0xb6, 0x02, 0x13, 0x2d, 0xa5, 0xca, 0x4d, 0x61, 0x38, 0x22, 0xc3, 0x0d,
	0xd4, 0xbf, 0xca, 0xb6, 0xdd, 0xdd, 0xaa, 0xe2, 0x69, 0xd5, 0x8b, 0xe7, 0xe7, 0x36, 0xdb, 0x7a,
	0x14, 0x2b, 0x43, 0x4d, 0x83, 0x18, 0xb5, 0xf9, 0x63, 0x05, 0xea, 0xcd, 0xa1, 0x0b, 0x18, 0x46,
	0xb1, 0xec, 0xc3, 0x9d, 0x5a, 0x1f, 0xc6, 0x88, 0xb8, 0x57, 0x0d, 0x68, 0x6c, 0x7a, 0x54, 0x40,
	0xf5, 0xe8, 0xe8, 0xd6, 0x1f, 0x1d, 0x70, 0xd7, 0x65, 0xa0, 0x17, 0x0f, 0x94, 0x86, 0x1c, 0x95,
	0x94, 0x58, 0xb6, 0x1f, 0x6c, 0xc2, 0x30, 0x58, 0xf7, 0x1c, 0x24, 0x54, 0x1c, 0x43, 0x89, 0xdb,
	0xec, 0xa7, 0x10, 0xf6, 0xc5, 0x85, 0x3a, 0xcc, 0x36, 0x3b, 0x30, 0xd7, 0x14, 0xc2, 0xbe, 0x28,
	0x44, 0xfe, 0x1e, 0x1b, 0x1e, 0xe7, 0x5a, 0xcb, 0xc4, 0x7c, 0x11, 0xc0, 0x2b, 0xc1, 0x0e, 0xf6,
	0xa1, 0xcb, 0x03, 0x84, 0x60, 0x60, 0x55, 0x7a, 0x7e, 0x87, 0x8d, 0x21, 0x92, 0x26, 0xd0, 0xc6,
	0x0d, 0x43, 0x46, 0x0e, 0x7b, 0xce, 0x41, 0xd4, 0x75, 0xa2, 0x69, 0xea, 0xef, 0xb0, 0x71, 0x43,
	0xef, 0x7f, 0xd3, 0x61, 0x5b, 0xf4, 0xd5, 0x49, 0x55, 0x24, 0x44, 0x2b, 0x14, 0xa8, 0x01, 0x7c,
	0x9a, 0x9c, 0xa9, 0x69, 0x41, 0x77, 0x0d, 0xf9, 0x4f, 0xb4, 0x43, 0xc1, 0x66, 0x10, 0xd8, 0xf2,
	0x89, 0xe8, 0xa4, 0x2a, 0x1c, 0xbd, 0x7a, 0x38, 0xd0, 0xda, 0x84, 0x90, 0x39, 0xee, 0x69, 0xe8,
	0x24, 0x87, 0x4b, 0xad, 0x5d, 0x29, 0x38, 0x09, 0xf7, 0xa6, 0x7e, 0x06, 0xa5, 0x85, 0x25, 0xd0,
	0x39, 0xdc, 0x12, 0x15, 0x80, 0xf4, 0xab, 0xb3, 0x33, 0x7a, 0x9f, 0x32, 0x5b, 0xec, 0x4e, 0xa4,
	0x36, 0x30, 0x07, 0x72, 0x41, 0x33, 0x74, 0x6d, 0xc0, 0x8a, 0xee, 0x19, 0x30, 0x72, 0x9c, 0xa4,
	0xd8, 0x67, 0x49, 0xf5, 0x10, 0xbe, 0x4a, 0xd5, 0x3c, 0xb6, 0x7d, 0xb6, 0x01, 0xe2, 0xf9, 0xe0,
	0xa5, 0x9a, 0x41, 0xf6, 0x4c, 0xec, 0xf9, 0xac, 0xd4, 0x7c, 0xd3, 0xee, 0x6c, 0xbc, 0x69, 0xef,
	0x5d, 0x7f, 0xfe, 0xf2, 0xe0, 0xd2, 0x8b, 0x97, 0x07, 0xad, 0xdf, 0xe1, 0xf7, 0x07, 0xfc, 0xbe,
	0x7f, 0x75, 0xd0, 0xfa, 0x11, 0x7e, 0xcf, 0xe1, 0xf7, 0x13, 0xfc, 0x5e, 0xc0, 0xef, 0xcb, 0x4b,
	0x4f, 0x7b, 0xd4, 0x88, 0x6e, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xa5, 0xe2, 0xf7, 0x42,
	0x0c, 0x00, 0x00,
>>>>>>> add `priority` for app
}
