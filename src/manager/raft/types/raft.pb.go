// Code generated by protoc-gen-gogo.
// source: raft.proto
// DO NOT EDIT!

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// StoreActionKind defines the operation to take on the store for the target of
// a storage action.
type StoreActionKind int32

const (
	StoreActionKindUnknown StoreActionKind = 0
	StoreActionKindCreate  StoreActionKind = 1
	StoreActionKindUpdate  StoreActionKind = 2
	StoreActionKindRemove  StoreActionKind = 3
)

var StoreActionKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "STORE_ACTION_CREATE",
	2: "STORE_ACTION_UPDATE",
	3: "STORE_ACTION_REMOVE",
}
var StoreActionKind_value = map[string]int32{
	"UNKNOWN":             0,
	"STORE_ACTION_CREATE": 1,
	"STORE_ACTION_UPDATE": 2,
	"STORE_ACTION_REMOVE": 3,
}

func (x StoreActionKind) String() string {
	return proto.EnumName(StoreActionKind_name, int32(x))
}
func (StoreActionKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaft, []int{0} }

// Contains one of many protobuf encoded objects to replicate
// over the raft backend with a request ID to track when the
// action is effectively applied
type InternalRaftRequest struct {
	ID     uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Action []*StoreAction `protobuf:"bytes,2,rep,name=action" json:"action,omitempty"`
}

func (m *InternalRaftRequest) Reset()                    { *m = InternalRaftRequest{} }
func (m *InternalRaftRequest) String() string            { return proto.CompactTextString(m) }
func (*InternalRaftRequest) ProtoMessage()               {}
func (*InternalRaftRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{0} }

// StoreAction defines a target and operation to apply on the storage system.
type StoreAction struct {
	Action StoreActionKind `protobuf:"varint,1,opt,name=action,proto3,enum=types.StoreActionKind" json:"action,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*StoreAction_Application
	//	*StoreAction_Framework
	//	*StoreAction_Version
	//	*StoreAction_Slot
	//	*StoreAction_Task
	//	*StoreAction_OfferAllocatorItem
	Target isStoreAction_Target `protobuf_oneof:"target"`
}

func (m *StoreAction) Reset()                    { *m = StoreAction{} }
func (m *StoreAction) String() string            { return proto.CompactTextString(m) }
func (*StoreAction) ProtoMessage()               {}
func (*StoreAction) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{1} }

type isStoreAction_Target interface {
	isStoreAction_Target()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type StoreAction_Application struct {
	Application *Application `protobuf:"bytes,2,opt,name=application,oneof"`
}
type StoreAction_Framework struct {
	Framework *Framework `protobuf:"bytes,3,opt,name=framework,oneof"`
}
type StoreAction_Version struct {
	Version *Version `protobuf:"bytes,4,opt,name=version,oneof"`
}
type StoreAction_Slot struct {
	Slot *Slot `protobuf:"bytes,5,opt,name=slot,oneof"`
}
type StoreAction_Task struct {
	Task *Task `protobuf:"bytes,6,opt,name=task,oneof"`
}
type StoreAction_OfferAllocatorItem struct {
	OfferAllocatorItem *OfferAllocatorItem `protobuf:"bytes,7,opt,name=offerAllocatorItem,oneof"`
}

func (*StoreAction_Application) isStoreAction_Target()        {}
func (*StoreAction_Framework) isStoreAction_Target()          {}
func (*StoreAction_Version) isStoreAction_Target()            {}
func (*StoreAction_Slot) isStoreAction_Target()               {}
func (*StoreAction_Task) isStoreAction_Target()               {}
func (*StoreAction_OfferAllocatorItem) isStoreAction_Target() {}

func (m *StoreAction) GetTarget() isStoreAction_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StoreAction) GetApplication() *Application {
	if x, ok := m.GetTarget().(*StoreAction_Application); ok {
		return x.Application
	}
	return nil
}

func (m *StoreAction) GetFramework() *Framework {
	if x, ok := m.GetTarget().(*StoreAction_Framework); ok {
		return x.Framework
	}
	return nil
}

func (m *StoreAction) GetVersion() *Version {
	if x, ok := m.GetTarget().(*StoreAction_Version); ok {
		return x.Version
	}
	return nil
}

func (m *StoreAction) GetSlot() *Slot {
	if x, ok := m.GetTarget().(*StoreAction_Slot); ok {
		return x.Slot
	}
	return nil
}

func (m *StoreAction) GetTask() *Task {
	if x, ok := m.GetTarget().(*StoreAction_Task); ok {
		return x.Task
	}
	return nil
}

func (m *StoreAction) GetOfferAllocatorItem() *OfferAllocatorItem {
	if x, ok := m.GetTarget().(*StoreAction_OfferAllocatorItem); ok {
		return x.OfferAllocatorItem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StoreAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StoreAction_OneofMarshaler, _StoreAction_OneofUnmarshaler, _StoreAction_OneofSizer, []interface{}{
		(*StoreAction_Application)(nil),
		(*StoreAction_Framework)(nil),
		(*StoreAction_Version)(nil),
		(*StoreAction_Slot)(nil),
		(*StoreAction_Task)(nil),
		(*StoreAction_OfferAllocatorItem)(nil),
	}
}

func _StoreAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StoreAction)
	// target
	switch x := m.Target.(type) {
	case *StoreAction_Application:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Application); err != nil {
			return err
		}
	case *StoreAction_Framework:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Framework); err != nil {
			return err
		}
	case *StoreAction_Version:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Version); err != nil {
			return err
		}
	case *StoreAction_Slot:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slot); err != nil {
			return err
		}
	case *StoreAction_Task:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Task); err != nil {
			return err
		}
	case *StoreAction_OfferAllocatorItem:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OfferAllocatorItem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StoreAction.Target has unexpected type %T", x)
	}
	return nil
}

func _StoreAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StoreAction)
	switch tag {
	case 2: // target.application
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Application)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_Application{msg}
		return true, err
	case 3: // target.framework
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Framework)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_Framework{msg}
		return true, err
	case 4: // target.version
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Version)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_Version{msg}
		return true, err
	case 5: // target.slot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Slot)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_Slot{msg}
		return true, err
	case 6: // target.task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Task)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_Task{msg}
		return true, err
	case 7: // target.offerAllocatorItem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OfferAllocatorItem)
		err := b.DecodeMessage(msg)
		m.Target = &StoreAction_OfferAllocatorItem{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StoreAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StoreAction)
	// target
	switch x := m.Target.(type) {
	case *StoreAction_Application:
		s := proto.Size(x.Application)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StoreAction_Framework:
		s := proto.Size(x.Framework)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StoreAction_Version:
		s := proto.Size(x.Version)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StoreAction_Slot:
		s := proto.Size(x.Slot)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StoreAction_Task:
		s := proto.Size(x.Task)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StoreAction_OfferAllocatorItem:
		s := proto.Size(x.OfferAllocatorItem)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Framework struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Framework) Reset()                    { *m = Framework{} }
func (m *Framework) String() string            { return proto.CompactTextString(m) }
func (*Framework) ProtoMessage()               {}
func (*Framework) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{2} }

func init() {
	proto.RegisterType((*InternalRaftRequest)(nil), "types.InternalRaftRequest")
	proto.RegisterType((*StoreAction)(nil), "types.StoreAction")
	proto.RegisterType((*Framework)(nil), "types.Framework")
	proto.RegisterEnum("types.StoreActionKind", StoreActionKind_name, StoreActionKind_value)
}
func (this *InternalRaftRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InternalRaftRequest)
	if !ok {
		that2, ok := that.(InternalRaftRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InternalRaftRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InternalRaftRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InternalRaftRequest but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if len(this.Action) != len(that1.Action) {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", len(this.Action), len(that1.Action))
	}
	for i := range this.Action {
		if !this.Action[i].Equal(that1.Action[i]) {
			return fmt.Errorf("Action this[%v](%v) Not Equal that[%v](%v)", i, this.Action[i], i, that1.Action[i])
		}
	}
	return nil
}
func (this *InternalRaftRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InternalRaftRequest)
	if !ok {
		that2, ok := that.(InternalRaftRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Action) != len(that1.Action) {
		return false
	}
	for i := range this.Action {
		if !this.Action[i].Equal(that1.Action[i]) {
			return false
		}
	}
	return true
}
func (this *StoreAction) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction)
	if !ok {
		that2, ok := that.(StoreAction)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction but is not nil && this == nil")
	}
	if this.Action != that1.Action {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", this.Action, that1.Action)
	}
	if that1.Target == nil {
		if this.Target != nil {
			return fmt.Errorf("this.Target != nil && that1.Target == nil")
		}
	} else if this.Target == nil {
		return fmt.Errorf("this.Target == nil && that1.Target != nil")
	} else if err := this.Target.VerboseEqual(that1.Target); err != nil {
		return err
	}
	return nil
}
func (this *StoreAction_Application) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_Application)
	if !ok {
		that2, ok := that.(StoreAction_Application)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_Application")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_Application but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_Application but is not nil && this == nil")
	}
	if !this.Application.Equal(that1.Application) {
		return fmt.Errorf("Application this(%v) Not Equal that(%v)", this.Application, that1.Application)
	}
	return nil
}
func (this *StoreAction_Framework) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_Framework)
	if !ok {
		that2, ok := that.(StoreAction_Framework)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_Framework")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_Framework but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_Framework but is not nil && this == nil")
	}
	if !this.Framework.Equal(that1.Framework) {
		return fmt.Errorf("Framework this(%v) Not Equal that(%v)", this.Framework, that1.Framework)
	}
	return nil
}
func (this *StoreAction_Version) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_Version)
	if !ok {
		that2, ok := that.(StoreAction_Version)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_Version")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_Version but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_Version but is not nil && this == nil")
	}
	if !this.Version.Equal(that1.Version) {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	return nil
}
func (this *StoreAction_Slot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_Slot)
	if !ok {
		that2, ok := that.(StoreAction_Slot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_Slot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_Slot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_Slot but is not nil && this == nil")
	}
	if !this.Slot.Equal(that1.Slot) {
		return fmt.Errorf("Slot this(%v) Not Equal that(%v)", this.Slot, that1.Slot)
	}
	return nil
}
func (this *StoreAction_Task) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_Task)
	if !ok {
		that2, ok := that.(StoreAction_Task)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_Task")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_Task but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_Task but is not nil && this == nil")
	}
	if !this.Task.Equal(that1.Task) {
		return fmt.Errorf("Task this(%v) Not Equal that(%v)", this.Task, that1.Task)
	}
	return nil
}
func (this *StoreAction_OfferAllocatorItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StoreAction_OfferAllocatorItem)
	if !ok {
		that2, ok := that.(StoreAction_OfferAllocatorItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StoreAction_OfferAllocatorItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StoreAction_OfferAllocatorItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StoreAction_OfferAllocatorItem but is not nil && this == nil")
	}
	if !this.OfferAllocatorItem.Equal(that1.OfferAllocatorItem) {
		return fmt.Errorf("OfferAllocatorItem this(%v) Not Equal that(%v)", this.OfferAllocatorItem, that1.OfferAllocatorItem)
	}
	return nil
}
func (this *StoreAction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction)
	if !ok {
		that2, ok := that.(StoreAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Target == nil {
		if this.Target != nil {
			return false
		}
	} else if this.Target == nil {
		return false
	} else if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *StoreAction_Application) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_Application)
	if !ok {
		that2, ok := that.(StoreAction_Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	return true
}
func (this *StoreAction_Framework) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_Framework)
	if !ok {
		that2, ok := that.(StoreAction_Framework)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Framework.Equal(that1.Framework) {
		return false
	}
	return true
}
func (this *StoreAction_Version) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_Version)
	if !ok {
		that2, ok := that.(StoreAction_Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	return true
}
func (this *StoreAction_Slot) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_Slot)
	if !ok {
		that2, ok := that.(StoreAction_Slot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slot.Equal(that1.Slot) {
		return false
	}
	return true
}
func (this *StoreAction_Task) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_Task)
	if !ok {
		that2, ok := that.(StoreAction_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *StoreAction_OfferAllocatorItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StoreAction_OfferAllocatorItem)
	if !ok {
		that2, ok := that.(StoreAction_OfferAllocatorItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.OfferAllocatorItem.Equal(that1.OfferAllocatorItem) {
		return false
	}
	return true
}
func (this *Framework) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Framework)
	if !ok {
		that2, ok := that.(Framework)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Framework")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Framework but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Framework but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *Framework) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Framework)
	if !ok {
		that2, ok := that.(Framework)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *InternalRaftRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.InternalRaftRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&types.StoreAction{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoreAction_Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_Application{` +
		`Application:` + fmt.Sprintf("%#v", this.Application) + `}`}, ", ")
	return s
}
func (this *StoreAction_Framework) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_Framework{` +
		`Framework:` + fmt.Sprintf("%#v", this.Framework) + `}`}, ", ")
	return s
}
func (this *StoreAction_Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_Version{` +
		`Version:` + fmt.Sprintf("%#v", this.Version) + `}`}, ", ")
	return s
}
func (this *StoreAction_Slot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_Slot{` +
		`Slot:` + fmt.Sprintf("%#v", this.Slot) + `}`}, ", ")
	return s
}
func (this *StoreAction_Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_Task{` +
		`Task:` + fmt.Sprintf("%#v", this.Task) + `}`}, ", ")
	return s
}
func (this *StoreAction_OfferAllocatorItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.StoreAction_OfferAllocatorItem{` +
		`OfferAllocatorItem:` + fmt.Sprintf("%#v", this.OfferAllocatorItem) + `}`}, ", ")
	return s
}
func (this *Framework) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.Framework{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRaft(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringRaft(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *InternalRaftRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InternalRaftRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft(data, i, uint64(m.ID))
	}
	if len(m.Action) > 0 {
		for _, msg := range m.Action {
			data[i] = 0x12
			i++
			i = encodeVarintRaft(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoreAction) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StoreAction) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintRaft(data, i, uint64(m.Action))
	}
	if m.Target != nil {
		nn1, err := m.Target.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *StoreAction_Application) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Application != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRaft(data, i, uint64(m.Application.Size()))
		n2, err := m.Application.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *StoreAction_Framework) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Framework != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintRaft(data, i, uint64(m.Framework.Size()))
		n3, err := m.Framework.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *StoreAction_Version) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Version != nil {
		data[i] = 0x22
		i++
		i = encodeVarintRaft(data, i, uint64(m.Version.Size()))
		n4, err := m.Version.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *StoreAction_Slot) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Slot != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintRaft(data, i, uint64(m.Slot.Size()))
		n5, err := m.Slot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *StoreAction_Task) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Task != nil {
		data[i] = 0x32
		i++
		i = encodeVarintRaft(data, i, uint64(m.Task.Size()))
		n6, err := m.Task.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *StoreAction_OfferAllocatorItem) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OfferAllocatorItem != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.OfferAllocatorItem.Size()))
		n7, err := m.OfferAllocatorItem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Framework) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Framework) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRaft(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func encodeFixed64Raft(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raft(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaft(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedInternalRaftRequest(r randyRaft, easy bool) *InternalRaftRequest {
	this := &InternalRaftRequest{}
	this.ID = uint64(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Action = make([]*StoreAction, v1)
		for i := 0; i < v1; i++ {
			this.Action[i] = NewPopulatedStoreAction(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStoreAction(r randyRaft, easy bool) *StoreAction {
	this := &StoreAction{}
	this.Action = StoreActionKind([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_Target := []int32{2, 3, 4, 5, 6, 7}[r.Intn(6)]
	switch oneofNumber_Target {
	case 2:
		this.Target = NewPopulatedStoreAction_Application(r, easy)
	case 3:
		this.Target = NewPopulatedStoreAction_Framework(r, easy)
	case 4:
		this.Target = NewPopulatedStoreAction_Version(r, easy)
	case 5:
		this.Target = NewPopulatedStoreAction_Slot(r, easy)
	case 6:
		this.Target = NewPopulatedStoreAction_Task(r, easy)
	case 7:
		this.Target = NewPopulatedStoreAction_OfferAllocatorItem(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStoreAction_Application(r randyRaft, easy bool) *StoreAction_Application {
	this := &StoreAction_Application{}
	this.Application = NewPopulatedApplication(r, easy)
	return this
}
func NewPopulatedStoreAction_Framework(r randyRaft, easy bool) *StoreAction_Framework {
	this := &StoreAction_Framework{}
	this.Framework = NewPopulatedFramework(r, easy)
	return this
}
func NewPopulatedStoreAction_Version(r randyRaft, easy bool) *StoreAction_Version {
	this := &StoreAction_Version{}
	this.Version = NewPopulatedVersion(r, easy)
	return this
}
func NewPopulatedStoreAction_Slot(r randyRaft, easy bool) *StoreAction_Slot {
	this := &StoreAction_Slot{}
	this.Slot = NewPopulatedSlot(r, easy)
	return this
}
func NewPopulatedStoreAction_Task(r randyRaft, easy bool) *StoreAction_Task {
	this := &StoreAction_Task{}
	this.Task = NewPopulatedTask(r, easy)
	return this
}
func NewPopulatedStoreAction_OfferAllocatorItem(r randyRaft, easy bool) *StoreAction_OfferAllocatorItem {
	this := &StoreAction_OfferAllocatorItem{}
	this.OfferAllocatorItem = NewPopulatedOfferAllocatorItem(r, easy)
	return this
}
func NewPopulatedFramework(r randyRaft, easy bool) *Framework {
	this := &Framework{}
	this.ID = randStringRaft(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRaft interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaft(r randyRaft) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaft(r randyRaft) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneRaft(r)
	}
	return string(tmps)
}
func randUnrecognizedRaft(r randyRaft, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldRaft(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldRaft(data []byte, r randyRaft, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateRaft(data, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		data = encodeVarintPopulateRaft(data, uint64(v3))
	case 1:
		data = encodeVarintPopulateRaft(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateRaft(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateRaft(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateRaft(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateRaft(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *InternalRaftRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRaft(uint64(m.ID))
	}
	if len(m.Action) > 0 {
		for _, e := range m.Action {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func (m *StoreAction) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovRaft(uint64(m.Action))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	return n
}

func (m *StoreAction_Application) Size() (n int) {
	var l int
	_ = l
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *StoreAction_Framework) Size() (n int) {
	var l int
	_ = l
	if m.Framework != nil {
		l = m.Framework.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *StoreAction_Version) Size() (n int) {
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *StoreAction_Slot) Size() (n int) {
	var l int
	_ = l
	if m.Slot != nil {
		l = m.Slot.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *StoreAction_Task) Size() (n int) {
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *StoreAction_OfferAllocatorItem) Size() (n int) {
	var l int
	_ = l
	if m.OfferAllocatorItem != nil {
		l = m.OfferAllocatorItem.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}
func (m *Framework) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func sovRaft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InternalRaftRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRaftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRaftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action, &StoreAction{})
			if err := m.Action[len(m.Action)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreAction) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Action |= (StoreActionKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Application{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_Application{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Framework", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Framework{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_Framework{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Version{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_Version{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Slot{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_Slot{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Task{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_Task{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferAllocatorItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OfferAllocatorItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &StoreAction_OfferAllocatorItem{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Framework) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Framework: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Framework: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft.proto", fileDescriptorRaft) }

var fileDescriptorRaft = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0x12, 0x41,
	0x18, 0xc7, 0x77, 0x17, 0xba, 0xc8, 0x90, 0x54, 0x9c, 0x2a, 0x6e, 0xf7, 0xb0, 0x22, 0x9a, 0xd8,
	0xf4, 0x80, 0x06, 0x13, 0xef, 0x0b, 0x5d, 0x23, 0x21, 0xb2, 0x66, 0x0a, 0x55, 0x4f, 0xcd, 0x58,
	0x06, 0x42, 0x58, 0x76, 0xd6, 0xd9, 0xb1, 0x8d, 0x6f, 0x60, 0x7c, 0x07, 0x4f, 0x7a, 0xf0, 0x11,
	0x8c, 0x4f, 0xd0, 0xa3, 0x4f, 0x60, 0xda, 0xbe, 0x80, 0x3d, 0x7a, 0xf4, 0x9b, 0x01, 0xda, 0x15,
	0x38, 0x7c, 0x09, 0xf9, 0x7f, 0xbf, 0xdf, 0x7c, 0xf3, 0x31, 0x59, 0x84, 0x04, 0x1d, 0xca, 0x7a,
	0x22, 0xb8, 0xe4, 0x78, 0x43, 0x7e, 0x4c, 0x58, 0xea, 0xde, 0x1e, 0xf1, 0x11, 0xd7, 0xc9, 0x63,
	0xf5, 0x6b, 0xd6, 0x74, 0x6f, 0xd1, 0x24, 0x89, 0xc6, 0x47, 0x54, 0x8e, 0x79, 0x3c, 0x8b, 0x6a,
	0x6f, 0xd1, 0x56, 0x3b, 0x96, 0x4c, 0xc4, 0x34, 0x22, 0x70, 0x0a, 0x61, 0xef, 0x3f, 0xb0, 0x54,
	0xe2, 0x0a, 0xb2, 0xc6, 0x03, 0xc7, 0xac, 0x9a, 0x3b, 0xf9, 0xa6, 0x7d, 0xf1, 0xfb, 0x9e, 0xd5,
	0xde, 0x23, 0x90, 0xe0, 0x5d, 0x64, 0xd3, 0x23, 0xa5, 0x3b, 0x56, 0x35, 0xb7, 0x53, 0x6a, 0xe0,
	0xba, 0x9e, 0x57, 0xdf, 0x97, 0x5c, 0x30, 0x5f, 0x77, 0xc8, 0x9c, 0xa8, 0x5d, 0x5a, 0xa8, 0x94,
	0xc9, 0x71, 0xfd, 0xca, 0x55, 0xe7, 0x6e, 0x36, 0x2a, 0xab, 0x6e, 0x67, 0x1c, 0x0f, 0x16, 0x3e,
	0x7e, 0x86, 0x4a, 0x99, 0xfb, 0xc2, 0x40, 0x33, 0x33, 0xd0, 0xbf, 0xee, 0xbc, 0x30, 0x48, 0x16,
	0xc4, 0x4f, 0x50, 0x71, 0x28, 0xe8, 0x94, 0x9d, 0x70, 0x31, 0x71, 0x72, 0xda, 0x2a, 0xcf, 0xad,
	0xe7, 0x8b, 0x1c, 0x9c, 0x6b, 0x08, 0xb6, 0x2a, 0x1c, 0x33, 0x91, 0xaa, 0x29, 0x79, 0xcd, 0x6f,
	0xce, 0xf9, 0x83, 0x59, 0x0a, 0xf4, 0x02, 0xc0, 0xf7, 0x51, 0x3e, 0x8d, 0xb8, 0x74, 0x36, 0x34,
	0x58, 0x5a, 0xec, 0x00, 0x11, 0x50, 0xba, 0xa5, 0x10, 0x49, 0xd3, 0x89, 0x63, 0xff, 0x87, 0xf4,
	0x20, 0x52, 0x88, 0x6a, 0xe1, 0x0e, 0xc2, 0x7c, 0x38, 0x64, 0xc2, 0x8f, 0x22, 0x0e, 0xd7, 0xe6,
	0xa2, 0x2d, 0xd9, 0xd4, 0x29, 0x68, 0x61, 0x7b, 0x2e, 0x84, 0x2b, 0x00, 0xe8, 0x6b, 0xb4, 0xe6,
	0x0d, 0x64, 0x4b, 0x2a, 0x46, 0x4c, 0xd6, 0x1e, 0xa0, 0xe2, 0xd5, 0x8a, 0x99, 0x37, 0x2c, 0x66,
	0xdf, 0x70, 0xf7, 0x8f, 0x89, 0x6e, 0x2e, 0xfd, 0xe7, 0xf8, 0x11, 0x2a, 0xf4, 0xbb, 0x9d, 0x6e,
	0xf8, 0xba, 0x5b, 0x36, 0x5c, 0xf7, 0xf3, 0x97, 0x6a, 0x65, 0x89, 0xe8, 0xc7, 0x93, 0x98, 0x9f,
	0xc4, 0xb8, 0x81, 0xb6, 0xf6, 0x7b, 0x21, 0x09, 0x0e, 0xfd, 0x56, 0xaf, 0x1d, 0x76, 0x0f, 0x5b,
	0x24, 0xf0, 0x7b, 0x41, 0xd9, 0x74, 0xb7, 0x41, 0xba, 0xb3, 0x24, 0xb5, 0x04, 0xa3, 0x92, 0xad,
	0x38, 0xfd, 0x57, 0x7b, 0xca, 0xb1, 0xd6, 0x3a, 0xfd, 0x64, 0xb0, 0xce, 0x21, 0xc1, 0xcb, 0xf0,
	0x20, 0x28, 0xe7, 0xd6, 0x3a, 0x84, 0x4d, 0xf9, 0x31, 0x73, 0xef, 0x7e, 0xfa, 0xea, 0x19, 0x3f,
	0xbf, 0x79, 0xcb, 0xdb, 0x35, 0x1f, 0x9e, 0x9e, 0x7b, 0xc6, 0xd9, 0xb9, 0x67, 0x5e, 0x42, 0xfd,
	0x85, 0xfa, 0x7e, 0xe1, 0x99, 0x3f, 0xa0, 0x4e, 0xa1, 0x7e, 0x41, 0x9d, 0x41, 0xbd, 0x31, 0xde,
	0xd9, 0xfa, 0x9b, 0x78, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xac, 0x06, 0x3a, 0x51, 0x03,
	0x00, 0x00,
}
